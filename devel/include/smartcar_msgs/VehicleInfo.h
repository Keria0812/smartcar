// Generated by gencpp from file smartcar_msgs/VehicleInfo.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_VEHICLEINFO_H
#define SMARTCAR_MSGS_MESSAGE_VEHICLEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <smartcar_msgs/LongitudinalData.h>
#include <smartcar_msgs/LateralData.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct VehicleInfo_
{
  typedef VehicleInfo_<ContainerAllocator> Type;

  VehicleInfo_()
    : header()
    , localization()
    , longitudinal_data()
    , lateral_data()  {
    }
  VehicleInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , localization(_alloc)
    , longitudinal_data(_alloc)
    , lateral_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _localization_type;
  _localization_type localization;

   typedef  ::smartcar_msgs::LongitudinalData_<ContainerAllocator>  _longitudinal_data_type;
  _longitudinal_data_type longitudinal_data;

   typedef  ::smartcar_msgs::LateralData_<ContainerAllocator>  _lateral_data_type;
  _lateral_data_type lateral_data;





  typedef boost::shared_ptr< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleInfo_

typedef ::smartcar_msgs::VehicleInfo_<std::allocator<void> > VehicleInfo;

typedef boost::shared_ptr< ::smartcar_msgs::VehicleInfo > VehicleInfoPtr;
typedef boost::shared_ptr< ::smartcar_msgs::VehicleInfo const> VehicleInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::VehicleInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::VehicleInfo_<ContainerAllocator1> & lhs, const ::smartcar_msgs::VehicleInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.localization == rhs.localization &&
    lhs.longitudinal_data == rhs.longitudinal_data &&
    lhs.lateral_data == rhs.lateral_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::VehicleInfo_<ContainerAllocator1> & lhs, const ::smartcar_msgs::VehicleInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce1548f612651099d85d928f1bef6a2e";
  }

  static const char* value(const ::smartcar_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce1548f612651099ULL;
  static const uint64_t static_value2 = 0xd85d928f1bef6a2eULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/VehicleInfo";
  }

  static const char* value(const ::smartcar_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Point localization\n"
"LongitudinalData longitudinal_data\n"
"LateralData lateral_data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/LongitudinalData\n"
"float64 vel_from_localization\n"
"float64 vel_from_wheels\n"
"float64 acceleration\n"
"float64 traveled_distance\n"
"float64 fl_wheel_angular_velocity\n"
"float64 fr_wheel_angular_velocity\n"
"float64 bl_wheel_angular_velocity\n"
"float64 br_wheel_angular_velocity\n"
"float64 gas_percent\n"
"float64 fl_gas_torque\n"
"float64 fr_gas_torque\n"
"float64 bl_gas_torque\n"
"float64 br_gas_torque\n"
"float64 fl_brake_Torque\n"
"float64 fr_brake_torque\n"
"float64 bl_brake_torque\n"
"float64 br_brake_torque\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/LateralData\n"
"float64 heading_angle\n"
"float64 steering_wheel_angle_actual\n"
"float64 steering_wheel_expected\n"
"float64 steering_wheel_error\n"
"float64 steering_wheel_cmd\n"
"\n"
"float64 fl_steering_angle_actual\n"
"float64 fr_steering_angle_actual\n"
"float64 single_track_steering_angle\n"
"float64 fl_steering_angle_expected\n"
"float64 fr_steering_angle_expected\n"
"float64 fl_steering_error\n"
"float64 fr_steering_error\n"
"float64 fl_steering_cmd\n"
"float64 fr_steering_cmd\n"
"\n"
;
  }

  static const char* value(const ::smartcar_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.localization);
      stream.next(m.longitudinal_data);
      stream.next(m.lateral_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::VehicleInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "localization: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.localization);
    s << indent << "longitudinal_data: ";
    s << std::endl;
    Printer< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >::stream(s, indent + "  ", v.longitudinal_data);
    s << indent << "lateral_data: ";
    s << std::endl;
    Printer< ::smartcar_msgs::LateralData_<ContainerAllocator> >::stream(s, indent + "  ", v.lateral_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_VEHICLEINFO_H
