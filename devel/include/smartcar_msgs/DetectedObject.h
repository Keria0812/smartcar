// Generated by gencpp from file smartcar_msgs/DetectedObject.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_DETECTEDOBJECT_H
#define SMARTCAR_MSGS_MESSAGE_DETECTEDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/ColorRGBA.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Twist.h>
#include <smartcar_msgs/My_Trajectory.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct DetectedObject_
{
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
    : header()
    , id()
    , label()
    , score(0.0)
    , color()
    , valid(false)
    , space_frame()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , heading(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , speed(0.0)
    , foot_lf()
    , foot_lr()
    , foot_rf()
    , foot_rr()
    , utm_x(0.0)
    , utm_y(0.0)
    , utm_z(0.0)
    , utm_heading(0.0)
    , utm_foot_lf()
    , utm_foot_lr()
    , utm_foot_rf()
    , utm_foot_rr()
    , utm_twist()
    , pose_reliable(false)
    , velocity_reliable(false)
    , acceleration_reliable(false)
    , indicator_state(0)
    , behavior_state(0)
    , user_defined_info()
    , is_static(false)
    , trajectory_()  {
    }
  DetectedObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , label(_alloc)
    , score(0.0)
    , color(_alloc)
    , valid(false)
    , space_frame(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , heading(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , speed(0.0)
    , foot_lf(_alloc)
    , foot_lr(_alloc)
    , foot_rf(_alloc)
    , foot_rr(_alloc)
    , utm_x(0.0)
    , utm_y(0.0)
    , utm_z(0.0)
    , utm_heading(0.0)
    , utm_foot_lf(_alloc)
    , utm_foot_lr(_alloc)
    , utm_foot_rf(_alloc)
    , utm_foot_rr(_alloc)
    , utm_twist(_alloc)
    , pose_reliable(false)
    , velocity_reliable(false)
    , acceleration_reliable(false)
    , indicator_state(0)
    , behavior_state(0)
    , user_defined_info(_alloc)
    , is_static(false)
    , trajectory_(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef float _score_type;
  _score_type score;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _space_frame_type;
  _space_frame_type space_frame;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _heading_type;
  _heading_type heading;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef float _speed_type;
  _speed_type speed;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _foot_lf_type;
  _foot_lf_type foot_lf;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _foot_lr_type;
  _foot_lr_type foot_lr;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _foot_rf_type;
  _foot_rf_type foot_rf;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _foot_rr_type;
  _foot_rr_type foot_rr;

   typedef double _utm_x_type;
  _utm_x_type utm_x;

   typedef double _utm_y_type;
  _utm_y_type utm_y;

   typedef double _utm_z_type;
  _utm_z_type utm_z;

   typedef double _utm_heading_type;
  _utm_heading_type utm_heading;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _utm_foot_lf_type;
  _utm_foot_lf_type utm_foot_lf;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _utm_foot_lr_type;
  _utm_foot_lr_type utm_foot_lr;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _utm_foot_rf_type;
  _utm_foot_rf_type utm_foot_rf;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _utm_foot_rr_type;
  _utm_foot_rr_type utm_foot_rr;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _utm_twist_type;
  _utm_twist_type utm_twist;

   typedef uint8_t _pose_reliable_type;
  _pose_reliable_type pose_reliable;

   typedef uint8_t _velocity_reliable_type;
  _velocity_reliable_type velocity_reliable;

   typedef uint8_t _acceleration_reliable_type;
  _acceleration_reliable_type acceleration_reliable;

   typedef uint8_t _indicator_state_type;
  _indicator_state_type indicator_state;

   typedef uint8_t _behavior_state_type;
  _behavior_state_type behavior_state;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _user_defined_info_type;
  _user_defined_info_type user_defined_info;

   typedef uint8_t _is_static_type;
  _is_static_type is_static;

   typedef  ::smartcar_msgs::My_Trajectory_<ContainerAllocator>  _trajectory__type;
  _trajectory__type trajectory_;





  typedef boost::shared_ptr< ::smartcar_msgs::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::DetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject_

typedef ::smartcar_msgs::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::smartcar_msgs::DetectedObject > DetectedObjectPtr;
typedef boost::shared_ptr< ::smartcar_msgs::DetectedObject const> DetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::DetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::DetectedObject_<ContainerAllocator1> & lhs, const ::smartcar_msgs::DetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.label == rhs.label &&
    lhs.score == rhs.score &&
    lhs.color == rhs.color &&
    lhs.valid == rhs.valid &&
    lhs.space_frame == rhs.space_frame &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.heading == rhs.heading &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.speed == rhs.speed &&
    lhs.foot_lf == rhs.foot_lf &&
    lhs.foot_lr == rhs.foot_lr &&
    lhs.foot_rf == rhs.foot_rf &&
    lhs.foot_rr == rhs.foot_rr &&
    lhs.utm_x == rhs.utm_x &&
    lhs.utm_y == rhs.utm_y &&
    lhs.utm_z == rhs.utm_z &&
    lhs.utm_heading == rhs.utm_heading &&
    lhs.utm_foot_lf == rhs.utm_foot_lf &&
    lhs.utm_foot_lr == rhs.utm_foot_lr &&
    lhs.utm_foot_rf == rhs.utm_foot_rf &&
    lhs.utm_foot_rr == rhs.utm_foot_rr &&
    lhs.utm_twist == rhs.utm_twist &&
    lhs.pose_reliable == rhs.pose_reliable &&
    lhs.velocity_reliable == rhs.velocity_reliable &&
    lhs.acceleration_reliable == rhs.acceleration_reliable &&
    lhs.indicator_state == rhs.indicator_state &&
    lhs.behavior_state == rhs.behavior_state &&
    lhs.user_defined_info == rhs.user_defined_info &&
    lhs.is_static == rhs.is_static &&
    lhs.trajectory_ == rhs.trajectory_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::DetectedObject_<ContainerAllocator1> & lhs, const ::smartcar_msgs::DetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8263e8ba2bd27309693c5d19983a7eff";
  }

  static const char* value(const ::smartcar_msgs::DetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8263e8ba2bd27309ULL;
  static const uint64_t static_value2 = 0x693c5d19983a7effULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/DetectedObject";
  }

  static const char* value(const ::smartcar_msgs::DetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header                 header\n"
"\n"
"string                           id      #便于后续预测轨迹赋值每个点的id, 最后的id为perception_id+trajectory_index，即id=2_12，代表id为2的障碍物的第12个轨迹点。\n"
"string                          label\n"
"float32                         score   #Score as defined by the detection, Optional\n"
"std_msgs/ColorRGBA              color   # Define this object specific color\n"
"bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering\n"
"\n"
"################ 3D BB\n"
"string                          space_frame #3D Space coordinate frame of the object, required if pose and dimensions are defines\n"
"float64                         x  #car frame x-forward y-left, z-up\n"
"float64                         y\n"
"float64                         z\n"
"float64                         heading\n"
"float32                         length\n"
"float32                         width\n"
"float32                         height\n"
"float32                         speed\n"
"geometry_msgs/Point             foot_lf #车辆坐标系下，左前\n"
"geometry_msgs/Point             foot_lr #左后\n"
"geometry_msgs/Point             foot_rf #右前\n"
"geometry_msgs/Point             foot_rr #右后\n"
"\n"
"\n"
"float64                         utm_x  #utm frame x-forward y-left, z-up\n"
"float64                         utm_y\n"
"float64                         utm_z\n"
"float64                         utm_heading\n"
"geometry_msgs/Point             utm_foot_lf\n"
"geometry_msgs/Point             utm_foot_lr\n"
"geometry_msgs/Point             utm_foot_rf\n"
"geometry_msgs/Point             utm_foot_rr\n"
"geometry_msgs/Twist             utm_twist\n"
"\n"
"\n"
"bool                            pose_reliable\n"
"bool                            velocity_reliable\n"
"bool                            acceleration_reliable\n"
"\n"
"############### Indicator information\n"
"uint8                          indicator_state # INDICATOR_LEFT = 0, INDICATOR_RIGHT = 1, INDICATOR_BOTH = 2, INDICATOR_NONE = 3\n"
"\n"
"############### Behavior State of the Detected Object\n"
"uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6\n"
"\n"
"#\n"
"string[]                        user_defined_info\n"
"bool is_static\n"
"\n"
"My_Trajectory trajectory_  #预测轨迹\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: smartcar_msgs/My_Trajectory\n"
"Header header\n"
"int32 lane_id\n"
"bool ESTOP\n"
"My_Trajectory_Point[] trajectory_points\n"
"int32 num\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/My_Trajectory_Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 theta\n"
"float64 kappa\n"
"float64 s\n"
"float64 l\n"
"float64 dkappa\n"
"float64 ddkappa\n"
"float64 v\n"
"float64 a\n"
"float64 relative_time\n"
"float64 gear\n"
;
  }

  static const char* value(const ::smartcar_msgs::DetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.label);
      stream.next(m.score);
      stream.next(m.color);
      stream.next(m.valid);
      stream.next(m.space_frame);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.heading);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.speed);
      stream.next(m.foot_lf);
      stream.next(m.foot_lr);
      stream.next(m.foot_rf);
      stream.next(m.foot_rr);
      stream.next(m.utm_x);
      stream.next(m.utm_y);
      stream.next(m.utm_z);
      stream.next(m.utm_heading);
      stream.next(m.utm_foot_lf);
      stream.next(m.utm_foot_lr);
      stream.next(m.utm_foot_rf);
      stream.next(m.utm_foot_rr);
      stream.next(m.utm_twist);
      stream.next(m.pose_reliable);
      stream.next(m.velocity_reliable);
      stream.next(m.acceleration_reliable);
      stream.next(m.indicator_state);
      stream.next(m.behavior_state);
      stream.next(m.user_defined_info);
      stream.next(m.is_static);
      stream.next(m.trajectory_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::DetectedObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "space_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.space_frame);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "foot_lf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.foot_lf);
    s << indent << "foot_lr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.foot_lr);
    s << indent << "foot_rf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.foot_rf);
    s << indent << "foot_rr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.foot_rr);
    s << indent << "utm_x: ";
    Printer<double>::stream(s, indent + "  ", v.utm_x);
    s << indent << "utm_y: ";
    Printer<double>::stream(s, indent + "  ", v.utm_y);
    s << indent << "utm_z: ";
    Printer<double>::stream(s, indent + "  ", v.utm_z);
    s << indent << "utm_heading: ";
    Printer<double>::stream(s, indent + "  ", v.utm_heading);
    s << indent << "utm_foot_lf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_foot_lf);
    s << indent << "utm_foot_lr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_foot_lr);
    s << indent << "utm_foot_rf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_foot_rf);
    s << indent << "utm_foot_rr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_foot_rr);
    s << indent << "utm_twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_twist);
    s << indent << "pose_reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pose_reliable);
    s << indent << "velocity_reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.velocity_reliable);
    s << indent << "acceleration_reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acceleration_reliable);
    s << indent << "indicator_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.indicator_state);
    s << indent << "behavior_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.behavior_state);
    s << indent << "user_defined_info[]" << std::endl;
    for (size_t i = 0; i < v.user_defined_info.size(); ++i)
    {
      s << indent << "  user_defined_info[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.user_defined_info[i]);
    }
    s << indent << "is_static: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_static);
    s << indent << "trajectory_: ";
    s << std::endl;
    Printer< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_DETECTEDOBJECT_H
