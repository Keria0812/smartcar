// Generated by gencpp from file smartcar_msgs/VehicleLightCommand.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_VEHICLELIGHTCOMMAND_H
#define SMARTCAR_MSGS_MESSAGE_VEHICLELIGHTCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct VehicleLightCommand_
{
  typedef VehicleLightCommand_<ContainerAllocator> Type;

  VehicleLightCommand_()
    : header()
    , brakelight_cmd(0)
    , iecu_lock_cmd(0)
    , turn_light_cmd(0)
    , car_light_cmd(0)  {
    }
  VehicleLightCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , brakelight_cmd(0)
    , iecu_lock_cmd(0)
    , turn_light_cmd(0)
    , car_light_cmd(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _brakelight_cmd_type;
  _brakelight_cmd_type brakelight_cmd;

   typedef int32_t _iecu_lock_cmd_type;
  _iecu_lock_cmd_type iecu_lock_cmd;

   typedef int32_t _turn_light_cmd_type;
  _turn_light_cmd_type turn_light_cmd;

   typedef int32_t _car_light_cmd_type;
  _car_light_cmd_type car_light_cmd;





  typedef boost::shared_ptr< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleLightCommand_

typedef ::smartcar_msgs::VehicleLightCommand_<std::allocator<void> > VehicleLightCommand;

typedef boost::shared_ptr< ::smartcar_msgs::VehicleLightCommand > VehicleLightCommandPtr;
typedef boost::shared_ptr< ::smartcar_msgs::VehicleLightCommand const> VehicleLightCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator1> & lhs, const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.brakelight_cmd == rhs.brakelight_cmd &&
    lhs.iecu_lock_cmd == rhs.iecu_lock_cmd &&
    lhs.turn_light_cmd == rhs.turn_light_cmd &&
    lhs.car_light_cmd == rhs.car_light_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator1> & lhs, const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e2364f8ec89eb4c9476632c281aea24";
  }

  static const char* value(const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e2364f8ec89eb4cULL;
  static const uint64_t static_value2 = 0x9476632c281aea24ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/VehicleLightCommand";
  }

  static const char* value(const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"#brakelight \n"
"int32 brakelight_cmd\n"
"\n"
"#iecu_lock,1 unlock\n"
"int32 iecu_lock_cmd\n"
"\n"
"#0 mid, 1 turn left, 2 turn right\n"
"int32 turn_light_cmd \n"
"\n"
"#0 close, 1 small light, 2 dipped headlight, 3 headlights on full beam\n"
"int32 car_light_cmd\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.brakelight_cmd);
      stream.next(m.iecu_lock_cmd);
      stream.next(m.turn_light_cmd);
      stream.next(m.car_light_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleLightCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::VehicleLightCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "brakelight_cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brakelight_cmd);
    s << indent << "iecu_lock_cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iecu_lock_cmd);
    s << indent << "turn_light_cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn_light_cmd);
    s << indent << "car_light_cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_light_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_VEHICLELIGHTCOMMAND_H
