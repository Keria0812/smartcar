// Generated by gencpp from file smartcar_msgs/VehicleChassis.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_VEHICLECHASSIS_H
#define SMARTCAR_MSGS_MESSAGE_VEHICLECHASSIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <smartcar_msgs/VehicleLightState.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct VehicleChassis_
{
  typedef VehicleChassis_<ContainerAllocator> Type;

  VehicleChassis_()
    : header()
    , cmd_torque(0.0)
    , cmd_decelaration(0.0)
    , cmd_gas(0.0)
    , cmd_brake(0.0)
    , cmd_steerAng(0.0)
    , feedback_brake_press(0.0)
    , feedback_gas(0.0)
    , feedback_torque(0.0)
    , feedback_Motor_rotv(0.0)
    , feedback_steerAng(0.0)
    , feedback_tireAng(0.0)
    , gas_pedal_press(false)
    , brake_pedal_press(false)
    , gear()
    , orientation()
    , linear_velocity()
    , vehicleAcceleration()
    , wheelspeed()
    , light_state()
    , vehiclespeed(0.0)
    , vcu_mode(0)  {
      orientation.assign(0.0);

      linear_velocity.assign(0.0);

      vehicleAcceleration.assign(0.0);

      wheelspeed.assign(0.0);
  }
  VehicleChassis_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cmd_torque(0.0)
    , cmd_decelaration(0.0)
    , cmd_gas(0.0)
    , cmd_brake(0.0)
    , cmd_steerAng(0.0)
    , feedback_brake_press(0.0)
    , feedback_gas(0.0)
    , feedback_torque(0.0)
    , feedback_Motor_rotv(0.0)
    , feedback_steerAng(0.0)
    , feedback_tireAng(0.0)
    , gas_pedal_press(false)
    , brake_pedal_press(false)
    , gear(_alloc)
    , orientation()
    , linear_velocity()
    , vehicleAcceleration()
    , wheelspeed()
    , light_state(_alloc)
    , vehiclespeed(0.0)
    , vcu_mode(0)  {
  (void)_alloc;
      orientation.assign(0.0);

      linear_velocity.assign(0.0);

      vehicleAcceleration.assign(0.0);

      wheelspeed.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _cmd_torque_type;
  _cmd_torque_type cmd_torque;

   typedef double _cmd_decelaration_type;
  _cmd_decelaration_type cmd_decelaration;

   typedef double _cmd_gas_type;
  _cmd_gas_type cmd_gas;

   typedef double _cmd_brake_type;
  _cmd_brake_type cmd_brake;

   typedef double _cmd_steerAng_type;
  _cmd_steerAng_type cmd_steerAng;

   typedef double _feedback_brake_press_type;
  _feedback_brake_press_type feedback_brake_press;

   typedef double _feedback_gas_type;
  _feedback_gas_type feedback_gas;

   typedef double _feedback_torque_type;
  _feedback_torque_type feedback_torque;

   typedef double _feedback_Motor_rotv_type;
  _feedback_Motor_rotv_type feedback_Motor_rotv;

   typedef double _feedback_steerAng_type;
  _feedback_steerAng_type feedback_steerAng;

   typedef double _feedback_tireAng_type;
  _feedback_tireAng_type feedback_tireAng;

   typedef uint8_t _gas_pedal_press_type;
  _gas_pedal_press_type gas_pedal_press;

   typedef uint8_t _brake_pedal_press_type;
  _brake_pedal_press_type brake_pedal_press;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gear_type;
  _gear_type gear;

   typedef boost::array<double, 3>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<double, 3>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef boost::array<double, 3>  _vehicleAcceleration_type;
  _vehicleAcceleration_type vehicleAcceleration;

   typedef boost::array<double, 4>  _wheelspeed_type;
  _wheelspeed_type wheelspeed;

   typedef  ::smartcar_msgs::VehicleLightState_<ContainerAllocator>  _light_state_type;
  _light_state_type light_state;

   typedef double _vehiclespeed_type;
  _vehiclespeed_type vehiclespeed;

   typedef int32_t _vcu_mode_type;
  _vcu_mode_type vcu_mode;





  typedef boost::shared_ptr< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleChassis_

typedef ::smartcar_msgs::VehicleChassis_<std::allocator<void> > VehicleChassis;

typedef boost::shared_ptr< ::smartcar_msgs::VehicleChassis > VehicleChassisPtr;
typedef boost::shared_ptr< ::smartcar_msgs::VehicleChassis const> VehicleChassisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::VehicleChassis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::VehicleChassis_<ContainerAllocator1> & lhs, const ::smartcar_msgs::VehicleChassis_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cmd_torque == rhs.cmd_torque &&
    lhs.cmd_decelaration == rhs.cmd_decelaration &&
    lhs.cmd_gas == rhs.cmd_gas &&
    lhs.cmd_brake == rhs.cmd_brake &&
    lhs.cmd_steerAng == rhs.cmd_steerAng &&
    lhs.feedback_brake_press == rhs.feedback_brake_press &&
    lhs.feedback_gas == rhs.feedback_gas &&
    lhs.feedback_torque == rhs.feedback_torque &&
    lhs.feedback_Motor_rotv == rhs.feedback_Motor_rotv &&
    lhs.feedback_steerAng == rhs.feedback_steerAng &&
    lhs.feedback_tireAng == rhs.feedback_tireAng &&
    lhs.gas_pedal_press == rhs.gas_pedal_press &&
    lhs.brake_pedal_press == rhs.brake_pedal_press &&
    lhs.gear == rhs.gear &&
    lhs.orientation == rhs.orientation &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.vehicleAcceleration == rhs.vehicleAcceleration &&
    lhs.wheelspeed == rhs.wheelspeed &&
    lhs.light_state == rhs.light_state &&
    lhs.vehiclespeed == rhs.vehiclespeed &&
    lhs.vcu_mode == rhs.vcu_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::VehicleChassis_<ContainerAllocator1> & lhs, const ::smartcar_msgs::VehicleChassis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebba083aece22e9a5c6fc1592f401f4c";
  }

  static const char* value(const ::smartcar_msgs::VehicleChassis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebba083aece22e9aULL;
  static const uint64_t static_value2 = 0x5c6fc1592f401f4cULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/VehicleChassis";
  }

  static const char* value(const ::smartcar_msgs::VehicleChassis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"#控制量\n"
"float64 cmd_torque  #N·m\n"
"float64 cmd_decelaration #m/s^2\n"
"float64 cmd_gas \n"
"float64 cmd_brake\n"
"float64 cmd_steerAng #deg\n"
"#反馈量\n"
"float64 feedback_brake_press  #%100\n"
"float64 feedback_gas  #%100\n"
"float64 feedback_torque  #N·m\n"
"float64 feedback_Motor_rotv #round/min\n"
"float64 feedback_steerAng #deg\n"
"float64 feedback_tireAng #deg\n"
"\n"
"\n"
"bool gas_pedal_press\n"
"bool brake_pedal_press\n"
"string gear\n"
"float64[3] orientation #deg, Guass frame(deg), X-front, Y-right, Z-down pitch, roll, yaw\n"
"float64[3] linear_velocity  #km/h, Guass frame\n"
"float64[3] vehicleAcceleration #m/s^2 vehicle frame\n"
"float64[4] wheelspeed #FL、FR、RL、RR km/h\n"
"\n"
"#EV\n"
"smartcar_msgs/VehicleLightState light_state #EV\n"
"#km/h\n"
"float64 vehiclespeed \n"
"\n"
"#vcu_mode, 0 manual_driving, 1 iECU , 2 remote_driving, 3 only control steer, 4 only control gas/brake\n"
"int32 vcu_mode  \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/VehicleLightState\n"
"Header header\n"
"#0 mid, 1 turn left, 2 turn right\n"
"int32 turn_light \n"
"\n"
"#0 close, 1 small light, 2 dipped headlight, 3 headlights on full beam\n"
"int32 car_light\n"
;
  }

  static const char* value(const ::smartcar_msgs::VehicleChassis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cmd_torque);
      stream.next(m.cmd_decelaration);
      stream.next(m.cmd_gas);
      stream.next(m.cmd_brake);
      stream.next(m.cmd_steerAng);
      stream.next(m.feedback_brake_press);
      stream.next(m.feedback_gas);
      stream.next(m.feedback_torque);
      stream.next(m.feedback_Motor_rotv);
      stream.next(m.feedback_steerAng);
      stream.next(m.feedback_tireAng);
      stream.next(m.gas_pedal_press);
      stream.next(m.brake_pedal_press);
      stream.next(m.gear);
      stream.next(m.orientation);
      stream.next(m.linear_velocity);
      stream.next(m.vehicleAcceleration);
      stream.next(m.wheelspeed);
      stream.next(m.light_state);
      stream.next(m.vehiclespeed);
      stream.next(m.vcu_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleChassis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::VehicleChassis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::VehicleChassis_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cmd_torque: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_torque);
    s << indent << "cmd_decelaration: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_decelaration);
    s << indent << "cmd_gas: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_gas);
    s << indent << "cmd_brake: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_brake);
    s << indent << "cmd_steerAng: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_steerAng);
    s << indent << "feedback_brake_press: ";
    Printer<double>::stream(s, indent + "  ", v.feedback_brake_press);
    s << indent << "feedback_gas: ";
    Printer<double>::stream(s, indent + "  ", v.feedback_gas);
    s << indent << "feedback_torque: ";
    Printer<double>::stream(s, indent + "  ", v.feedback_torque);
    s << indent << "feedback_Motor_rotv: ";
    Printer<double>::stream(s, indent + "  ", v.feedback_Motor_rotv);
    s << indent << "feedback_steerAng: ";
    Printer<double>::stream(s, indent + "  ", v.feedback_steerAng);
    s << indent << "feedback_tireAng: ";
    Printer<double>::stream(s, indent + "  ", v.feedback_tireAng);
    s << indent << "gas_pedal_press: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gas_pedal_press);
    s << indent << "brake_pedal_press: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_pedal_press);
    s << indent << "gear: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gear);
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "linear_velocity[]" << std::endl;
    for (size_t i = 0; i < v.linear_velocity.size(); ++i)
    {
      s << indent << "  linear_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linear_velocity[i]);
    }
    s << indent << "vehicleAcceleration[]" << std::endl;
    for (size_t i = 0; i < v.vehicleAcceleration.size(); ++i)
    {
      s << indent << "  vehicleAcceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vehicleAcceleration[i]);
    }
    s << indent << "wheelspeed[]" << std::endl;
    for (size_t i = 0; i < v.wheelspeed.size(); ++i)
    {
      s << indent << "  wheelspeed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wheelspeed[i]);
    }
    s << indent << "light_state: ";
    s << std::endl;
    Printer< ::smartcar_msgs::VehicleLightState_<ContainerAllocator> >::stream(s, indent + "  ", v.light_state);
    s << indent << "vehiclespeed: ";
    Printer<double>::stream(s, indent + "  ", v.vehiclespeed);
    s << indent << "vcu_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vcu_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_VEHICLECHASSIS_H
