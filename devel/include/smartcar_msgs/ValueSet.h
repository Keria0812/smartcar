// Generated by gencpp from file smartcar_msgs/ValueSet.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_VALUESET_H
#define SMARTCAR_MSGS_MESSAGE_VALUESET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smartcar_msgs
{
template <class ContainerAllocator>
struct ValueSet_
{
  typedef ValueSet_<ContainerAllocator> Type;

  ValueSet_()
    : center(0)
    , range(0)  {
    }
  ValueSet_(const ContainerAllocator& _alloc)
    : center(0)
    , range(0)  {
  (void)_alloc;
    }



   typedef int32_t _center_type;
  _center_type center;

   typedef int32_t _range_type;
  _range_type range;





  typedef boost::shared_ptr< ::smartcar_msgs::ValueSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::ValueSet_<ContainerAllocator> const> ConstPtr;

}; // struct ValueSet_

typedef ::smartcar_msgs::ValueSet_<std::allocator<void> > ValueSet;

typedef boost::shared_ptr< ::smartcar_msgs::ValueSet > ValueSetPtr;
typedef boost::shared_ptr< ::smartcar_msgs::ValueSet const> ValueSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::ValueSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::ValueSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::ValueSet_<ContainerAllocator1> & lhs, const ::smartcar_msgs::ValueSet_<ContainerAllocator2> & rhs)
{
  return lhs.center == rhs.center &&
    lhs.range == rhs.range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::ValueSet_<ContainerAllocator1> & lhs, const ::smartcar_msgs::ValueSet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::ValueSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::ValueSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::ValueSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "281ab05df668dd70c6f78f89e9a412a0";
  }

  static const char* value(const ::smartcar_msgs::ValueSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x281ab05df668dd70ULL;
  static const uint64_t static_value2 = 0xc6f78f89e9a412a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/ValueSet";
  }

  static const char* value(const ::smartcar_msgs::ValueSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 center\n"
"int32 range\n"
;
  }

  static const char* value(const ::smartcar_msgs::ValueSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ValueSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::ValueSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::ValueSet_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center);
    s << indent << "range: ";
    Printer<int32_t>::stream(s, indent + "  ", v.range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_VALUESET_H
