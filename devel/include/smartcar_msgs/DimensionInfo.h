// Generated by gencpp from file smartcar_msgs/DimensionInfo.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_DIMENSIONINFO_H
#define SMARTCAR_MSGS_MESSAGE_DIMENSIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smartcar_msgs
{
template <class ContainerAllocator>
struct DimensionInfo_
{
  typedef DimensionInfo_<ContainerAllocator> Type;

  DimensionInfo_()
    : wheel_base(0.0)
    , front_wheel_base(0.0)
    , rear_wheel_base(0.0)
    , track(0.0)
    , mass(0.0)
    , front_cornering_stiffness(0.0)
    , rear_cornering_stiffness(0.0)
    , max_friction_coefficient(0.0)
    , Iz(0.0)  {
    }
  DimensionInfo_(const ContainerAllocator& _alloc)
    : wheel_base(0.0)
    , front_wheel_base(0.0)
    , rear_wheel_base(0.0)
    , track(0.0)
    , mass(0.0)
    , front_cornering_stiffness(0.0)
    , rear_cornering_stiffness(0.0)
    , max_friction_coefficient(0.0)
    , Iz(0.0)  {
  (void)_alloc;
    }



   typedef double _wheel_base_type;
  _wheel_base_type wheel_base;

   typedef double _front_wheel_base_type;
  _front_wheel_base_type front_wheel_base;

   typedef double _rear_wheel_base_type;
  _rear_wheel_base_type rear_wheel_base;

   typedef double _track_type;
  _track_type track;

   typedef double _mass_type;
  _mass_type mass;

   typedef double _front_cornering_stiffness_type;
  _front_cornering_stiffness_type front_cornering_stiffness;

   typedef double _rear_cornering_stiffness_type;
  _rear_cornering_stiffness_type rear_cornering_stiffness;

   typedef double _max_friction_coefficient_type;
  _max_friction_coefficient_type max_friction_coefficient;

   typedef double _Iz_type;
  _Iz_type Iz;





  typedef boost::shared_ptr< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct DimensionInfo_

typedef ::smartcar_msgs::DimensionInfo_<std::allocator<void> > DimensionInfo;

typedef boost::shared_ptr< ::smartcar_msgs::DimensionInfo > DimensionInfoPtr;
typedef boost::shared_ptr< ::smartcar_msgs::DimensionInfo const> DimensionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::DimensionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::DimensionInfo_<ContainerAllocator1> & lhs, const ::smartcar_msgs::DimensionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.wheel_base == rhs.wheel_base &&
    lhs.front_wheel_base == rhs.front_wheel_base &&
    lhs.rear_wheel_base == rhs.rear_wheel_base &&
    lhs.track == rhs.track &&
    lhs.mass == rhs.mass &&
    lhs.front_cornering_stiffness == rhs.front_cornering_stiffness &&
    lhs.rear_cornering_stiffness == rhs.rear_cornering_stiffness &&
    lhs.max_friction_coefficient == rhs.max_friction_coefficient &&
    lhs.Iz == rhs.Iz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::DimensionInfo_<ContainerAllocator1> & lhs, const ::smartcar_msgs::DimensionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83b23d28199a7ca222af4ff1d8a32e6b";
  }

  static const char* value(const ::smartcar_msgs::DimensionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83b23d28199a7ca2ULL;
  static const uint64_t static_value2 = 0x22af4ff1d8a32e6bULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/DimensionInfo";
  }

  static const char* value(const ::smartcar_msgs::DimensionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 wheel_base\n"
"float64 front_wheel_base\n"
"float64 rear_wheel_base\n"
"float64 track\n"
"float64 mass\n"
"float64 front_cornering_stiffness\n"
"float64 rear_cornering_stiffness\n"
"float64 max_friction_coefficient\n"
"float64 Iz\n"
;
  }

  static const char* value(const ::smartcar_msgs::DimensionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_base);
      stream.next(m.front_wheel_base);
      stream.next(m.rear_wheel_base);
      stream.next(m.track);
      stream.next(m.mass);
      stream.next(m.front_cornering_stiffness);
      stream.next(m.rear_cornering_stiffness);
      stream.next(m.max_friction_coefficient);
      stream.next(m.Iz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DimensionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::DimensionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::DimensionInfo_<ContainerAllocator>& v)
  {
    s << indent << "wheel_base: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_base);
    s << indent << "front_wheel_base: ";
    Printer<double>::stream(s, indent + "  ", v.front_wheel_base);
    s << indent << "rear_wheel_base: ";
    Printer<double>::stream(s, indent + "  ", v.rear_wheel_base);
    s << indent << "track: ";
    Printer<double>::stream(s, indent + "  ", v.track);
    s << indent << "mass: ";
    Printer<double>::stream(s, indent + "  ", v.mass);
    s << indent << "front_cornering_stiffness: ";
    Printer<double>::stream(s, indent + "  ", v.front_cornering_stiffness);
    s << indent << "rear_cornering_stiffness: ";
    Printer<double>::stream(s, indent + "  ", v.rear_cornering_stiffness);
    s << indent << "max_friction_coefficient: ";
    Printer<double>::stream(s, indent + "  ", v.max_friction_coefficient);
    s << indent << "Iz: ";
    Printer<double>::stream(s, indent + "  ", v.Iz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_DIMENSIONINFO_H
