// Generated by gencpp from file smartcar_msgs/ObstacleAttr.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_OBSTACLEATTR_H
#define SMARTCAR_MSGS_MESSAGE_OBSTACLEATTR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smartcar_msgs
{
template <class ContainerAllocator>
struct ObstacleAttr_
{
  typedef ObstacleAttr_<ContainerAllocator> Type;

  ObstacleAttr_()
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , heading(0.0)
    , speed(0.0)  {
    }
  ObstacleAttr_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , heading(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleAttr_

typedef ::smartcar_msgs::ObstacleAttr_<std::allocator<void> > ObstacleAttr;

typedef boost::shared_ptr< ::smartcar_msgs::ObstacleAttr > ObstacleAttrPtr;
typedef boost::shared_ptr< ::smartcar_msgs::ObstacleAttr const> ObstacleAttrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator1> & lhs, const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.heading == rhs.heading &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator1> & lhs, const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02514c61ac3cbf9c6dec8707481d24e1";
  }

  static const char* value(const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02514c61ac3cbf9cULL;
  static const uint64_t static_value2 = 0x6dec8707481d24e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/ObstacleAttr";
  }

  static const char* value(const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"float64 heading\n"
"float64 speed\n"
;
  }

  static const char* value(const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.heading);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleAttr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::ObstacleAttr_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_OBSTACLEATTR_H
