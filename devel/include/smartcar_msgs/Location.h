// Generated by gencpp from file smartcar_msgs/Location.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_LOCATION_H
#define SMARTCAR_MSGS_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct Location_
{
  typedef Location_<ContainerAllocator> Type;

  Location_()
    : header()
    , ins_time()
    , global_pos()
    , wgs84_pos()
    , global_speed()
    , accelerate()
    , orientation()
    , rpy_rate()
    , speed(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , v_z(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , ins_std_error()
    , ins_data_info()
    , INS_status()  {
      ins_time.assign(0);

      wgs84_pos.assign(0.0);

      global_speed.assign(0.0);

      accelerate.assign(0.0);

      orientation.assign(0.0);

      rpy_rate.assign(0.0);

      ins_std_error.assign(0.0);

      ins_data_info.assign(0);
  }
  Location_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ins_time()
    , global_pos(_alloc)
    , wgs84_pos()
    , global_speed()
    , accelerate()
    , orientation()
    , rpy_rate()
    , speed(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , v_z(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , ins_std_error()
    , ins_data_info()
    , INS_status(_alloc)  {
  (void)_alloc;
      ins_time.assign(0);

      wgs84_pos.assign(0.0);

      global_speed.assign(0.0);

      accelerate.assign(0.0);

      orientation.assign(0.0);

      rpy_rate.assign(0.0);

      ins_std_error.assign(0.0);

      ins_data_info.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<int32_t, 2>  _ins_time_type;
  _ins_time_type ins_time;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _global_pos_type;
  _global_pos_type global_pos;

   typedef boost::array<double, 3>  _wgs84_pos_type;
  _wgs84_pos_type wgs84_pos;

   typedef boost::array<float, 3>  _global_speed_type;
  _global_speed_type global_speed;

   typedef boost::array<float, 3>  _accelerate_type;
  _accelerate_type accelerate;

   typedef boost::array<float, 3>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<float, 3>  _rpy_rate_type;
  _rpy_rate_type rpy_rate;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _v_x_type;
  _v_x_type v_x;

   typedef double _v_y_type;
  _v_y_type v_y;

   typedef double _v_z_type;
  _v_z_type v_z;

   typedef double _accel_x_type;
  _accel_x_type accel_x;

   typedef double _accel_y_type;
  _accel_y_type accel_y;

   typedef double _accel_z_type;
  _accel_z_type accel_z;

   typedef boost::array<float, 4>  _ins_std_error_type;
  _ins_std_error_type ins_std_error;

   typedef boost::array<int32_t, 3>  _ins_data_info_type;
  _ins_data_info_type ins_data_info;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _INS_status_type;
  _INS_status_type INS_status;





  typedef boost::shared_ptr< ::smartcar_msgs::Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::Location_<ContainerAllocator> const> ConstPtr;

}; // struct Location_

typedef ::smartcar_msgs::Location_<std::allocator<void> > Location;

typedef boost::shared_ptr< ::smartcar_msgs::Location > LocationPtr;
typedef boost::shared_ptr< ::smartcar_msgs::Location const> LocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::Location_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Location_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ins_time == rhs.ins_time &&
    lhs.global_pos == rhs.global_pos &&
    lhs.wgs84_pos == rhs.wgs84_pos &&
    lhs.global_speed == rhs.global_speed &&
    lhs.accelerate == rhs.accelerate &&
    lhs.orientation == rhs.orientation &&
    lhs.rpy_rate == rhs.rpy_rate &&
    lhs.speed == rhs.speed &&
    lhs.v_x == rhs.v_x &&
    lhs.v_y == rhs.v_y &&
    lhs.v_z == rhs.v_z &&
    lhs.accel_x == rhs.accel_x &&
    lhs.accel_y == rhs.accel_y &&
    lhs.accel_z == rhs.accel_z &&
    lhs.ins_std_error == rhs.ins_std_error &&
    lhs.ins_data_info == rhs.ins_data_info &&
    lhs.INS_status == rhs.INS_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::Location_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Location_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00db5d5e3e65b48b95b9219165f53168";
  }

  static const char* value(const ::smartcar_msgs::Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00db5d5e3e65b48bULL;
  static const uint64_t static_value2 = 0x95b9219165f53168ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/Location";
  }

  static const char* value(const ::smartcar_msgs::Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header	   header # ROS time(s)\n"
"\n"
"int32[2]   ins_time # GPS weeks, GPS million seconds\n"
"geometry_msgs/Point global_pos # x,y, east-north-sky frame(m)\n"
"float64[3] wgs84_pos # lon,lat,alt, WGS84(rad,rad,m)\n"
"float32[3] global_speed # east_speed,north_speed,up_speed,east-north-sky frame(m/s)\n"
"float32[3] accelerate # /* m/s^2, utm坐标系 */\n"
"float32[3] orientation # roll,pitch,yaw, Vehicle/Guass frame(rad,rad,rad)\n"
"float32[3] rpy_rate # roll_rate, pitch_rate, yaw_rate, Vehicle frame(rad/s)\n"
"float64    speed # 总的速度\n"
"float64    v_x # base_link坐标系\n"
"float64    v_y\n"
"float64    v_z\n"
"float64 accel_x # base_link坐标系\n"
"float64 accel_y \n"
"float64 accel_z \n"
"\n"
"float32[4] ins_std_error # std_lat, std_lon, std_height, std_heading\n"
"int32[3]   ins_data_info # ins_num_satellite, gps_delay , wheel_speed\n"
"string     INS_status # 0_NONE_,  16_SINGLE_, 17_PSRDIFF_ , 34_NARROW_FLOAT_, 50_NARROW_INT_\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::smartcar_msgs::Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ins_time);
      stream.next(m.global_pos);
      stream.next(m.wgs84_pos);
      stream.next(m.global_speed);
      stream.next(m.accelerate);
      stream.next(m.orientation);
      stream.next(m.rpy_rate);
      stream.next(m.speed);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.v_z);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.ins_std_error);
      stream.next(m.ins_data_info);
      stream.next(m.INS_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::Location_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ins_time[]" << std::endl;
    for (size_t i = 0; i < v.ins_time.size(); ++i)
    {
      s << indent << "  ins_time[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ins_time[i]);
    }
    s << indent << "global_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.global_pos);
    s << indent << "wgs84_pos[]" << std::endl;
    for (size_t i = 0; i < v.wgs84_pos.size(); ++i)
    {
      s << indent << "  wgs84_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wgs84_pos[i]);
    }
    s << indent << "global_speed[]" << std::endl;
    for (size_t i = 0; i < v.global_speed.size(); ++i)
    {
      s << indent << "  global_speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.global_speed[i]);
    }
    s << indent << "accelerate[]" << std::endl;
    for (size_t i = 0; i < v.accelerate.size(); ++i)
    {
      s << indent << "  accelerate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accelerate[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "rpy_rate[]" << std::endl;
    for (size_t i = 0; i < v.rpy_rate.size(); ++i)
    {
      s << indent << "  rpy_rate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpy_rate[i]);
    }
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "v_x: ";
    Printer<double>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<double>::stream(s, indent + "  ", v.v_y);
    s << indent << "v_z: ";
    Printer<double>::stream(s, indent + "  ", v.v_z);
    s << indent << "accel_x: ";
    Printer<double>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<double>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<double>::stream(s, indent + "  ", v.accel_z);
    s << indent << "ins_std_error[]" << std::endl;
    for (size_t i = 0; i < v.ins_std_error.size(); ++i)
    {
      s << indent << "  ins_std_error[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ins_std_error[i]);
    }
    s << indent << "ins_data_info[]" << std::endl;
    for (size_t i = 0; i < v.ins_data_info.size(); ++i)
    {
      s << indent << "  ins_data_info[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ins_data_info[i]);
    }
    s << indent << "INS_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.INS_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_LOCATION_H
