// Generated by gencpp from file smartcar_msgs/Grid.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_GRID_H
#define SMARTCAR_MSGS_MESSAGE_GRID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct Grid_
{
  typedef Grid_<ContainerAllocator> Type;

  Grid_()
    : header()
    , timestamp()
    , width(0)
    , height(0)
    , width_step(0.0)
    , height_step(0.0)
    , grid_nums(0)
    , grid()
    , enabled(0)  {
    }
  Grid_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timestamp()
    , width(0)
    , height(0)
    , width_step(0.0)
    , height_step(0.0)
    , grid_nums(0)
    , grid(_alloc)
    , enabled(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef float _width_step_type;
  _width_step_type width_step;

   typedef float _height_step_type;
  _height_step_type height_step;

   typedef int32_t _grid_nums_type;
  _grid_nums_type grid_nums;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _grid_type;
  _grid_type grid;

   typedef int8_t _enabled_type;
  _enabled_type enabled;





  typedef boost::shared_ptr< ::smartcar_msgs::Grid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::Grid_<ContainerAllocator> const> ConstPtr;

}; // struct Grid_

typedef ::smartcar_msgs::Grid_<std::allocator<void> > Grid;

typedef boost::shared_ptr< ::smartcar_msgs::Grid > GridPtr;
typedef boost::shared_ptr< ::smartcar_msgs::Grid const> GridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::Grid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::Grid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::Grid_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Grid_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.timestamp == rhs.timestamp &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.width_step == rhs.width_step &&
    lhs.height_step == rhs.height_step &&
    lhs.grid_nums == rhs.grid_nums &&
    lhs.grid == rhs.grid &&
    lhs.enabled == rhs.enabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::Grid_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Grid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Grid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Grid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Grid_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbc2797365011f70b841464ee55d9225";
  }

  static const char* value(const ::smartcar_msgs::Grid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbc2797365011f70ULL;
  static const uint64_t static_value2 = 0xb841464ee55d9225ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/Grid";
  }

  static const char* value(const ::smartcar_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header 	   header\n"
"time       timestamp\n"
"int32      width\n"
"int32      height\n"
"float32    width_step\n"
"float32    height_step\n"
"int32      grid_nums\n"
"int8[]     grid\n"
"int8       enabled\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::smartcar_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::Grid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timestamp);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.width_step);
      stream.next(m.height_step);
      stream.next(m.grid_nums);
      stream.next(m.grid);
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::Grid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::Grid_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width_step: ";
    Printer<float>::stream(s, indent + "  ", v.width_step);
    s << indent << "height_step: ";
    Printer<float>::stream(s, indent + "  ", v.height_step);
    s << indent << "grid_nums: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grid_nums);
    s << indent << "grid[]" << std::endl;
    for (size_t i = 0; i < v.grid.size(); ++i)
    {
      s << indent << "  grid[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.grid[i]);
    }
    s << indent << "enabled: ";
    Printer<int8_t>::stream(s, indent + "  ", v.enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_GRID_H
