// Generated by gencpp from file smartcar_msgs/LongitudinalData.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_LONGITUDINALDATA_H
#define SMARTCAR_MSGS_MESSAGE_LONGITUDINALDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smartcar_msgs
{
template <class ContainerAllocator>
struct LongitudinalData_
{
  typedef LongitudinalData_<ContainerAllocator> Type;

  LongitudinalData_()
    : vel_from_localization(0.0)
    , vel_from_wheels(0.0)
    , acceleration(0.0)
    , traveled_distance(0.0)
    , fl_wheel_angular_velocity(0.0)
    , fr_wheel_angular_velocity(0.0)
    , bl_wheel_angular_velocity(0.0)
    , br_wheel_angular_velocity(0.0)
    , gas_percent(0.0)
    , fl_gas_torque(0.0)
    , fr_gas_torque(0.0)
    , bl_gas_torque(0.0)
    , br_gas_torque(0.0)
    , fl_brake_Torque(0.0)
    , fr_brake_torque(0.0)
    , bl_brake_torque(0.0)
    , br_brake_torque(0.0)  {
    }
  LongitudinalData_(const ContainerAllocator& _alloc)
    : vel_from_localization(0.0)
    , vel_from_wheels(0.0)
    , acceleration(0.0)
    , traveled_distance(0.0)
    , fl_wheel_angular_velocity(0.0)
    , fr_wheel_angular_velocity(0.0)
    , bl_wheel_angular_velocity(0.0)
    , br_wheel_angular_velocity(0.0)
    , gas_percent(0.0)
    , fl_gas_torque(0.0)
    , fr_gas_torque(0.0)
    , bl_gas_torque(0.0)
    , br_gas_torque(0.0)
    , fl_brake_Torque(0.0)
    , fr_brake_torque(0.0)
    , bl_brake_torque(0.0)
    , br_brake_torque(0.0)  {
  (void)_alloc;
    }



   typedef double _vel_from_localization_type;
  _vel_from_localization_type vel_from_localization;

   typedef double _vel_from_wheels_type;
  _vel_from_wheels_type vel_from_wheels;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef double _traveled_distance_type;
  _traveled_distance_type traveled_distance;

   typedef double _fl_wheel_angular_velocity_type;
  _fl_wheel_angular_velocity_type fl_wheel_angular_velocity;

   typedef double _fr_wheel_angular_velocity_type;
  _fr_wheel_angular_velocity_type fr_wheel_angular_velocity;

   typedef double _bl_wheel_angular_velocity_type;
  _bl_wheel_angular_velocity_type bl_wheel_angular_velocity;

   typedef double _br_wheel_angular_velocity_type;
  _br_wheel_angular_velocity_type br_wheel_angular_velocity;

   typedef double _gas_percent_type;
  _gas_percent_type gas_percent;

   typedef double _fl_gas_torque_type;
  _fl_gas_torque_type fl_gas_torque;

   typedef double _fr_gas_torque_type;
  _fr_gas_torque_type fr_gas_torque;

   typedef double _bl_gas_torque_type;
  _bl_gas_torque_type bl_gas_torque;

   typedef double _br_gas_torque_type;
  _br_gas_torque_type br_gas_torque;

   typedef double _fl_brake_Torque_type;
  _fl_brake_Torque_type fl_brake_Torque;

   typedef double _fr_brake_torque_type;
  _fr_brake_torque_type fr_brake_torque;

   typedef double _bl_brake_torque_type;
  _bl_brake_torque_type bl_brake_torque;

   typedef double _br_brake_torque_type;
  _br_brake_torque_type br_brake_torque;





  typedef boost::shared_ptr< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> const> ConstPtr;

}; // struct LongitudinalData_

typedef ::smartcar_msgs::LongitudinalData_<std::allocator<void> > LongitudinalData;

typedef boost::shared_ptr< ::smartcar_msgs::LongitudinalData > LongitudinalDataPtr;
typedef boost::shared_ptr< ::smartcar_msgs::LongitudinalData const> LongitudinalDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::LongitudinalData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::LongitudinalData_<ContainerAllocator1> & lhs, const ::smartcar_msgs::LongitudinalData_<ContainerAllocator2> & rhs)
{
  return lhs.vel_from_localization == rhs.vel_from_localization &&
    lhs.vel_from_wheels == rhs.vel_from_wheels &&
    lhs.acceleration == rhs.acceleration &&
    lhs.traveled_distance == rhs.traveled_distance &&
    lhs.fl_wheel_angular_velocity == rhs.fl_wheel_angular_velocity &&
    lhs.fr_wheel_angular_velocity == rhs.fr_wheel_angular_velocity &&
    lhs.bl_wheel_angular_velocity == rhs.bl_wheel_angular_velocity &&
    lhs.br_wheel_angular_velocity == rhs.br_wheel_angular_velocity &&
    lhs.gas_percent == rhs.gas_percent &&
    lhs.fl_gas_torque == rhs.fl_gas_torque &&
    lhs.fr_gas_torque == rhs.fr_gas_torque &&
    lhs.bl_gas_torque == rhs.bl_gas_torque &&
    lhs.br_gas_torque == rhs.br_gas_torque &&
    lhs.fl_brake_Torque == rhs.fl_brake_Torque &&
    lhs.fr_brake_torque == rhs.fr_brake_torque &&
    lhs.bl_brake_torque == rhs.bl_brake_torque &&
    lhs.br_brake_torque == rhs.br_brake_torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::LongitudinalData_<ContainerAllocator1> & lhs, const ::smartcar_msgs::LongitudinalData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e1bfb472e4917d66e73052e666a6e34";
  }

  static const char* value(const ::smartcar_msgs::LongitudinalData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e1bfb472e4917d6ULL;
  static const uint64_t static_value2 = 0x6e73052e666a6e34ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/LongitudinalData";
  }

  static const char* value(const ::smartcar_msgs::LongitudinalData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 vel_from_localization\n"
"float64 vel_from_wheels\n"
"float64 acceleration\n"
"float64 traveled_distance\n"
"float64 fl_wheel_angular_velocity\n"
"float64 fr_wheel_angular_velocity\n"
"float64 bl_wheel_angular_velocity\n"
"float64 br_wheel_angular_velocity\n"
"float64 gas_percent\n"
"float64 fl_gas_torque\n"
"float64 fr_gas_torque\n"
"float64 bl_gas_torque\n"
"float64 br_gas_torque\n"
"float64 fl_brake_Torque\n"
"float64 fr_brake_torque\n"
"float64 bl_brake_torque\n"
"float64 br_brake_torque\n"
;
  }

  static const char* value(const ::smartcar_msgs::LongitudinalData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_from_localization);
      stream.next(m.vel_from_wheels);
      stream.next(m.acceleration);
      stream.next(m.traveled_distance);
      stream.next(m.fl_wheel_angular_velocity);
      stream.next(m.fr_wheel_angular_velocity);
      stream.next(m.bl_wheel_angular_velocity);
      stream.next(m.br_wheel_angular_velocity);
      stream.next(m.gas_percent);
      stream.next(m.fl_gas_torque);
      stream.next(m.fr_gas_torque);
      stream.next(m.bl_gas_torque);
      stream.next(m.br_gas_torque);
      stream.next(m.fl_brake_Torque);
      stream.next(m.fr_brake_torque);
      stream.next(m.bl_brake_torque);
      stream.next(m.br_brake_torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LongitudinalData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::LongitudinalData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::LongitudinalData_<ContainerAllocator>& v)
  {
    s << indent << "vel_from_localization: ";
    Printer<double>::stream(s, indent + "  ", v.vel_from_localization);
    s << indent << "vel_from_wheels: ";
    Printer<double>::stream(s, indent + "  ", v.vel_from_wheels);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "traveled_distance: ";
    Printer<double>::stream(s, indent + "  ", v.traveled_distance);
    s << indent << "fl_wheel_angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.fl_wheel_angular_velocity);
    s << indent << "fr_wheel_angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.fr_wheel_angular_velocity);
    s << indent << "bl_wheel_angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.bl_wheel_angular_velocity);
    s << indent << "br_wheel_angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.br_wheel_angular_velocity);
    s << indent << "gas_percent: ";
    Printer<double>::stream(s, indent + "  ", v.gas_percent);
    s << indent << "fl_gas_torque: ";
    Printer<double>::stream(s, indent + "  ", v.fl_gas_torque);
    s << indent << "fr_gas_torque: ";
    Printer<double>::stream(s, indent + "  ", v.fr_gas_torque);
    s << indent << "bl_gas_torque: ";
    Printer<double>::stream(s, indent + "  ", v.bl_gas_torque);
    s << indent << "br_gas_torque: ";
    Printer<double>::stream(s, indent + "  ", v.br_gas_torque);
    s << indent << "fl_brake_Torque: ";
    Printer<double>::stream(s, indent + "  ", v.fl_brake_Torque);
    s << indent << "fr_brake_torque: ";
    Printer<double>::stream(s, indent + "  ", v.fr_brake_torque);
    s << indent << "bl_brake_torque: ";
    Printer<double>::stream(s, indent + "  ", v.bl_brake_torque);
    s << indent << "br_brake_torque: ";
    Printer<double>::stream(s, indent + "  ", v.br_brake_torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_LONGITUDINALDATA_H
