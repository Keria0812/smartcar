// Generated by gencpp from file smartcar_msgs/Obstacles.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_OBSTACLES_H
#define SMARTCAR_MSGS_MESSAGE_OBSTACLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <smartcar_msgs/ObstacleAttr.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct Obstacles_
{
  typedef Obstacles_<ContainerAllocator> Type;

  Obstacles_()
    : Obstacles()  {
    }
  Obstacles_(const ContainerAllocator& _alloc)
    : Obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >> _Obstacles_type;
  _Obstacles_type Obstacles;





  typedef boost::shared_ptr< ::smartcar_msgs::Obstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::Obstacles_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacles_

typedef ::smartcar_msgs::Obstacles_<std::allocator<void> > Obstacles;

typedef boost::shared_ptr< ::smartcar_msgs::Obstacles > ObstaclesPtr;
typedef boost::shared_ptr< ::smartcar_msgs::Obstacles const> ObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::Obstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::Obstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::Obstacles_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Obstacles_<ContainerAllocator2> & rhs)
{
  return lhs.Obstacles == rhs.Obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::Obstacles_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Obstacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Obstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Obstacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Obstacles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42f94931bc3e97baf969e4dc42dad246";
  }

  static const char* value(const ::smartcar_msgs::Obstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42f94931bc3e97baULL;
  static const uint64_t static_value2 = 0xf969e4dc42dad246ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/Obstacles";
  }

  static const char* value(const ::smartcar_msgs::Obstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return " ObstacleAttr[] Obstacles\n"
"================================================================================\n"
"MSG: smartcar_msgs/ObstacleAttr\n"
"int8 id\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"float64 heading\n"
"float64 speed\n"
;
  }

  static const char* value(const ::smartcar_msgs::Obstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::Obstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::Obstacles_<ContainerAllocator>& v)
  {
    s << indent << "Obstacles[]" << std::endl;
    for (size_t i = 0; i < v.Obstacles.size(); ++i)
    {
      s << indent << "  Obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::smartcar_msgs::ObstacleAttr_<ContainerAllocator> >::stream(s, indent + "    ", v.Obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_OBSTACLES_H
