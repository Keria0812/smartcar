// Generated by gencpp from file smartcar_msgs/DetectedObjectArray.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_DETECTEDOBJECTARRAY_H
#define SMARTCAR_MSGS_MESSAGE_DETECTEDOBJECTARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <smartcar_msgs/DetectedObject.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct DetectedObjectArray_
{
  typedef DetectedObjectArray_<ContainerAllocator> Type;

  DetectedObjectArray_()
    : header()
    , objects()
    , num(0)  {
    }
  DetectedObjectArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects(_alloc)
    , num(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::smartcar_msgs::DetectedObject_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >> _objects_type;
  _objects_type objects;

   typedef uint32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObjectArray_

typedef ::smartcar_msgs::DetectedObjectArray_<std::allocator<void> > DetectedObjectArray;

typedef boost::shared_ptr< ::smartcar_msgs::DetectedObjectArray > DetectedObjectArrayPtr;
typedef boost::shared_ptr< ::smartcar_msgs::DetectedObjectArray const> DetectedObjectArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator1> & lhs, const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.objects == rhs.objects &&
    lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator1> & lhs, const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c68050d331471548543425b21258f71a";
  }

  static const char* value(const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc68050d331471548ULL;
  static const uint64_t static_value2 = 0x543425b21258f71aULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/DetectedObjectArray";
  }

  static const char* value(const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"DetectedObject[] objects\n"
"uint32 num\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/DetectedObject\n"
"std_msgs/Header                 header\n"
"\n"
"string                           id      #便于后续预测轨迹赋值每个点的id, 最后的id为perception_id+trajectory_index，即id=2_12，代表id为2的障碍物的第12个轨迹点。\n"
"string                          label\n"
"float32                         score   #Score as defined by the detection, Optional\n"
"std_msgs/ColorRGBA              color   # Define this object specific color\n"
"bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering\n"
"\n"
"################ 3D BB\n"
"string                          space_frame #3D Space coordinate frame of the object, required if pose and dimensions are defines\n"
"float64                         x  #car frame x-forward y-left, z-up\n"
"float64                         y\n"
"float64                         z\n"
"float64                         heading\n"
"float32                         length\n"
"float32                         width\n"
"float32                         height\n"
"float32                         speed\n"
"geometry_msgs/Point             foot_lf #车辆坐标系下，左前\n"
"geometry_msgs/Point             foot_lr #左后\n"
"geometry_msgs/Point             foot_rf #右前\n"
"geometry_msgs/Point             foot_rr #右后\n"
"\n"
"\n"
"float64                         utm_x  #utm frame x-forward y-left, z-up\n"
"float64                         utm_y\n"
"float64                         utm_z\n"
"float64                         utm_heading\n"
"geometry_msgs/Point             utm_foot_lf\n"
"geometry_msgs/Point             utm_foot_lr\n"
"geometry_msgs/Point             utm_foot_rf\n"
"geometry_msgs/Point             utm_foot_rr\n"
"geometry_msgs/Twist             utm_twist\n"
"\n"
"\n"
"bool                            pose_reliable\n"
"bool                            velocity_reliable\n"
"bool                            acceleration_reliable\n"
"\n"
"############### Indicator information\n"
"uint8                          indicator_state # INDICATOR_LEFT = 0, INDICATOR_RIGHT = 1, INDICATOR_BOTH = 2, INDICATOR_NONE = 3\n"
"\n"
"############### Behavior State of the Detected Object\n"
"uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6\n"
"\n"
"#\n"
"string[]                        user_defined_info\n"
"bool is_static\n"
"\n"
"My_Trajectory trajectory_  #预测轨迹\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: smartcar_msgs/My_Trajectory\n"
"Header header\n"
"int32 lane_id\n"
"bool ESTOP\n"
"My_Trajectory_Point[] trajectory_points\n"
"int32 num\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/My_Trajectory_Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 theta\n"
"float64 kappa\n"
"float64 s\n"
"float64 l\n"
"float64 dkappa\n"
"float64 ddkappa\n"
"float64 v\n"
"float64 a\n"
"float64 relative_time\n"
"float64 gear\n"
;
  }

  static const char* value(const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObjectArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::DetectedObjectArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::smartcar_msgs::DetectedObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_DETECTEDOBJECTARRAY_H
