// Generated by gencpp from file smartcar_msgs/My_Trajectory.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_MY_TRAJECTORY_H
#define SMARTCAR_MSGS_MESSAGE_MY_TRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <smartcar_msgs/My_Trajectory_Point.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct My_Trajectory_
{
  typedef My_Trajectory_<ContainerAllocator> Type;

  My_Trajectory_()
    : header()
    , lane_id(0)
    , ESTOP(false)
    , trajectory_points()
    , num(0)  {
    }
  My_Trajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lane_id(0)
    , ESTOP(false)
    , trajectory_points(_alloc)
    , num(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef uint8_t _ESTOP_type;
  _ESTOP_type ESTOP;

   typedef std::vector< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >> _trajectory_points_type;
  _trajectory_points_type trajectory_points;

   typedef int32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct My_Trajectory_

typedef ::smartcar_msgs::My_Trajectory_<std::allocator<void> > My_Trajectory;

typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory > My_TrajectoryPtr;
typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory const> My_TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::My_Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::My_Trajectory_<ContainerAllocator1> & lhs, const ::smartcar_msgs::My_Trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lane_id == rhs.lane_id &&
    lhs.ESTOP == rhs.ESTOP &&
    lhs.trajectory_points == rhs.trajectory_points &&
    lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::My_Trajectory_<ContainerAllocator1> & lhs, const ::smartcar_msgs::My_Trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71feceee353912c5f03c9c52a30dd4cf";
  }

  static const char* value(const ::smartcar_msgs::My_Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71feceee353912c5ULL;
  static const uint64_t static_value2 = 0xf03c9c52a30dd4cfULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/My_Trajectory";
  }

  static const char* value(const ::smartcar_msgs::My_Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 lane_id\n"
"bool ESTOP\n"
"My_Trajectory_Point[] trajectory_points\n"
"int32 num\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/My_Trajectory_Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 theta\n"
"float64 kappa\n"
"float64 s\n"
"float64 l\n"
"float64 dkappa\n"
"float64 ddkappa\n"
"float64 v\n"
"float64 a\n"
"float64 relative_time\n"
"float64 gear\n"
;
  }

  static const char* value(const ::smartcar_msgs::My_Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lane_id);
      stream.next(m.ESTOP);
      stream.next(m.trajectory_points);
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct My_Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::My_Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::My_Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "ESTOP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESTOP);
    s << indent << "trajectory_points[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_points.size(); ++i)
    {
      s << indent << "  trajectory_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_points[i]);
    }
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_MY_TRAJECTORY_H
