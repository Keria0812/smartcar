// Generated by gencpp from file smartcar_msgs/My_Trajectory_Point.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_MY_TRAJECTORY_POINT_H
#define SMARTCAR_MSGS_MESSAGE_MY_TRAJECTORY_POINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smartcar_msgs
{
template <class ContainerAllocator>
struct My_Trajectory_Point_
{
  typedef My_Trajectory_Point_<ContainerAllocator> Type;

  My_Trajectory_Point_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)
    , kappa(0.0)
    , s(0.0)
    , l(0.0)
    , dkappa(0.0)
    , ddkappa(0.0)
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)
    , gear(0.0)  {
    }
  My_Trajectory_Point_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)
    , kappa(0.0)
    , s(0.0)
    , l(0.0)
    , dkappa(0.0)
    , ddkappa(0.0)
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)
    , gear(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _kappa_type;
  _kappa_type kappa;

   typedef double _s_type;
  _s_type s;

   typedef double _l_type;
  _l_type l;

   typedef double _dkappa_type;
  _dkappa_type dkappa;

   typedef double _ddkappa_type;
  _ddkappa_type ddkappa;

   typedef double _v_type;
  _v_type v;

   typedef double _a_type;
  _a_type a;

   typedef double _relative_time_type;
  _relative_time_type relative_time;

   typedef double _gear_type;
  _gear_type gear;





  typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> const> ConstPtr;

}; // struct My_Trajectory_Point_

typedef ::smartcar_msgs::My_Trajectory_Point_<std::allocator<void> > My_Trajectory_Point;

typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory_Point > My_Trajectory_PointPtr;
typedef boost::shared_ptr< ::smartcar_msgs::My_Trajectory_Point const> My_Trajectory_PointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator1> & lhs, const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.theta == rhs.theta &&
    lhs.kappa == rhs.kappa &&
    lhs.s == rhs.s &&
    lhs.l == rhs.l &&
    lhs.dkappa == rhs.dkappa &&
    lhs.ddkappa == rhs.ddkappa &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a &&
    lhs.relative_time == rhs.relative_time &&
    lhs.gear == rhs.gear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator1> & lhs, const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b99836b373278ef538727f7eb83a3fe";
  }

  static const char* value(const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b99836b373278efULL;
  static const uint64_t static_value2 = 0x538727f7eb83a3feULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/My_Trajectory_Point";
  }

  static const char* value(const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 theta\n"
"float64 kappa\n"
"float64 s\n"
"float64 l\n"
"float64 dkappa\n"
"float64 ddkappa\n"
"float64 v\n"
"float64 a\n"
"float64 relative_time\n"
"float64 gear\n"
;
  }

  static const char* value(const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.theta);
      stream.next(m.kappa);
      stream.next(m.s);
      stream.next(m.l);
      stream.next(m.dkappa);
      stream.next(m.ddkappa);
      stream.next(m.v);
      stream.next(m.a);
      stream.next(m.relative_time);
      stream.next(m.gear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct My_Trajectory_Point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "kappa: ";
    Printer<double>::stream(s, indent + "  ", v.kappa);
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "l: ";
    Printer<double>::stream(s, indent + "  ", v.l);
    s << indent << "dkappa: ";
    Printer<double>::stream(s, indent + "  ", v.dkappa);
    s << indent << "ddkappa: ";
    Printer<double>::stream(s, indent + "  ", v.ddkappa);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "relative_time: ";
    Printer<double>::stream(s, indent + "  ", v.relative_time);
    s << indent << "gear: ";
    Printer<double>::stream(s, indent + "  ", v.gear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_MY_TRAJECTORY_POINT_H
