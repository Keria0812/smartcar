// Generated by gencpp from file smartcar_msgs/LateralData.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_LATERALDATA_H
#define SMARTCAR_MSGS_MESSAGE_LATERALDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smartcar_msgs
{
template <class ContainerAllocator>
struct LateralData_
{
  typedef LateralData_<ContainerAllocator> Type;

  LateralData_()
    : heading_angle(0.0)
    , steering_wheel_angle_actual(0.0)
    , steering_wheel_expected(0.0)
    , steering_wheel_error(0.0)
    , steering_wheel_cmd(0.0)
    , fl_steering_angle_actual(0.0)
    , fr_steering_angle_actual(0.0)
    , single_track_steering_angle(0.0)
    , fl_steering_angle_expected(0.0)
    , fr_steering_angle_expected(0.0)
    , fl_steering_error(0.0)
    , fr_steering_error(0.0)
    , fl_steering_cmd(0.0)
    , fr_steering_cmd(0.0)  {
    }
  LateralData_(const ContainerAllocator& _alloc)
    : heading_angle(0.0)
    , steering_wheel_angle_actual(0.0)
    , steering_wheel_expected(0.0)
    , steering_wheel_error(0.0)
    , steering_wheel_cmd(0.0)
    , fl_steering_angle_actual(0.0)
    , fr_steering_angle_actual(0.0)
    , single_track_steering_angle(0.0)
    , fl_steering_angle_expected(0.0)
    , fr_steering_angle_expected(0.0)
    , fl_steering_error(0.0)
    , fr_steering_error(0.0)
    , fl_steering_cmd(0.0)
    , fr_steering_cmd(0.0)  {
  (void)_alloc;
    }



   typedef double _heading_angle_type;
  _heading_angle_type heading_angle;

   typedef double _steering_wheel_angle_actual_type;
  _steering_wheel_angle_actual_type steering_wheel_angle_actual;

   typedef double _steering_wheel_expected_type;
  _steering_wheel_expected_type steering_wheel_expected;

   typedef double _steering_wheel_error_type;
  _steering_wheel_error_type steering_wheel_error;

   typedef double _steering_wheel_cmd_type;
  _steering_wheel_cmd_type steering_wheel_cmd;

   typedef double _fl_steering_angle_actual_type;
  _fl_steering_angle_actual_type fl_steering_angle_actual;

   typedef double _fr_steering_angle_actual_type;
  _fr_steering_angle_actual_type fr_steering_angle_actual;

   typedef double _single_track_steering_angle_type;
  _single_track_steering_angle_type single_track_steering_angle;

   typedef double _fl_steering_angle_expected_type;
  _fl_steering_angle_expected_type fl_steering_angle_expected;

   typedef double _fr_steering_angle_expected_type;
  _fr_steering_angle_expected_type fr_steering_angle_expected;

   typedef double _fl_steering_error_type;
  _fl_steering_error_type fl_steering_error;

   typedef double _fr_steering_error_type;
  _fr_steering_error_type fr_steering_error;

   typedef double _fl_steering_cmd_type;
  _fl_steering_cmd_type fl_steering_cmd;

   typedef double _fr_steering_cmd_type;
  _fr_steering_cmd_type fr_steering_cmd;





  typedef boost::shared_ptr< ::smartcar_msgs::LateralData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::LateralData_<ContainerAllocator> const> ConstPtr;

}; // struct LateralData_

typedef ::smartcar_msgs::LateralData_<std::allocator<void> > LateralData;

typedef boost::shared_ptr< ::smartcar_msgs::LateralData > LateralDataPtr;
typedef boost::shared_ptr< ::smartcar_msgs::LateralData const> LateralDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::LateralData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::LateralData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::LateralData_<ContainerAllocator1> & lhs, const ::smartcar_msgs::LateralData_<ContainerAllocator2> & rhs)
{
  return lhs.heading_angle == rhs.heading_angle &&
    lhs.steering_wheel_angle_actual == rhs.steering_wheel_angle_actual &&
    lhs.steering_wheel_expected == rhs.steering_wheel_expected &&
    lhs.steering_wheel_error == rhs.steering_wheel_error &&
    lhs.steering_wheel_cmd == rhs.steering_wheel_cmd &&
    lhs.fl_steering_angle_actual == rhs.fl_steering_angle_actual &&
    lhs.fr_steering_angle_actual == rhs.fr_steering_angle_actual &&
    lhs.single_track_steering_angle == rhs.single_track_steering_angle &&
    lhs.fl_steering_angle_expected == rhs.fl_steering_angle_expected &&
    lhs.fr_steering_angle_expected == rhs.fr_steering_angle_expected &&
    lhs.fl_steering_error == rhs.fl_steering_error &&
    lhs.fr_steering_error == rhs.fr_steering_error &&
    lhs.fl_steering_cmd == rhs.fl_steering_cmd &&
    lhs.fr_steering_cmd == rhs.fr_steering_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::LateralData_<ContainerAllocator1> & lhs, const ::smartcar_msgs::LateralData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::LateralData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::LateralData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::LateralData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::LateralData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::LateralData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::LateralData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::LateralData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfef9feeb4812e9c07678250076f59e3";
  }

  static const char* value(const ::smartcar_msgs::LateralData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfef9feeb4812e9cULL;
  static const uint64_t static_value2 = 0x07678250076f59e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::LateralData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/LateralData";
  }

  static const char* value(const ::smartcar_msgs::LateralData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::LateralData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 heading_angle\n"
"float64 steering_wheel_angle_actual\n"
"float64 steering_wheel_expected\n"
"float64 steering_wheel_error\n"
"float64 steering_wheel_cmd\n"
"\n"
"float64 fl_steering_angle_actual\n"
"float64 fr_steering_angle_actual\n"
"float64 single_track_steering_angle\n"
"float64 fl_steering_angle_expected\n"
"float64 fr_steering_angle_expected\n"
"float64 fl_steering_error\n"
"float64 fr_steering_error\n"
"float64 fl_steering_cmd\n"
"float64 fr_steering_cmd\n"
"\n"
;
  }

  static const char* value(const ::smartcar_msgs::LateralData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::LateralData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading_angle);
      stream.next(m.steering_wheel_angle_actual);
      stream.next(m.steering_wheel_expected);
      stream.next(m.steering_wheel_error);
      stream.next(m.steering_wheel_cmd);
      stream.next(m.fl_steering_angle_actual);
      stream.next(m.fr_steering_angle_actual);
      stream.next(m.single_track_steering_angle);
      stream.next(m.fl_steering_angle_expected);
      stream.next(m.fr_steering_angle_expected);
      stream.next(m.fl_steering_error);
      stream.next(m.fr_steering_error);
      stream.next(m.fl_steering_cmd);
      stream.next(m.fr_steering_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LateralData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::LateralData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::LateralData_<ContainerAllocator>& v)
  {
    s << indent << "heading_angle: ";
    Printer<double>::stream(s, indent + "  ", v.heading_angle);
    s << indent << "steering_wheel_angle_actual: ";
    Printer<double>::stream(s, indent + "  ", v.steering_wheel_angle_actual);
    s << indent << "steering_wheel_expected: ";
    Printer<double>::stream(s, indent + "  ", v.steering_wheel_expected);
    s << indent << "steering_wheel_error: ";
    Printer<double>::stream(s, indent + "  ", v.steering_wheel_error);
    s << indent << "steering_wheel_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.steering_wheel_cmd);
    s << indent << "fl_steering_angle_actual: ";
    Printer<double>::stream(s, indent + "  ", v.fl_steering_angle_actual);
    s << indent << "fr_steering_angle_actual: ";
    Printer<double>::stream(s, indent + "  ", v.fr_steering_angle_actual);
    s << indent << "single_track_steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.single_track_steering_angle);
    s << indent << "fl_steering_angle_expected: ";
    Printer<double>::stream(s, indent + "  ", v.fl_steering_angle_expected);
    s << indent << "fr_steering_angle_expected: ";
    Printer<double>::stream(s, indent + "  ", v.fr_steering_angle_expected);
    s << indent << "fl_steering_error: ";
    Printer<double>::stream(s, indent + "  ", v.fl_steering_error);
    s << indent << "fr_steering_error: ";
    Printer<double>::stream(s, indent + "  ", v.fr_steering_error);
    s << indent << "fl_steering_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.fl_steering_cmd);
    s << indent << "fr_steering_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.fr_steering_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_LATERALDATA_H
