// Generated by gencpp from file smartcar_msgs/Augmented_My_Trajectory_Point.msg
// DO NOT EDIT!


#ifndef SMARTCAR_MSGS_MESSAGE_AUGMENTED_MY_TRAJECTORY_POINT_H
#define SMARTCAR_MSGS_MESSAGE_AUGMENTED_MY_TRAJECTORY_POINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <smartcar_msgs/My_Trajectory_Point.h>
#include <smartcar_msgs/VehicleInfo.h>

namespace smartcar_msgs
{
template <class ContainerAllocator>
struct Augmented_My_Trajectory_Point_
{
  typedef Augmented_My_Trajectory_Point_<ContainerAllocator> Type;

  Augmented_My_Trajectory_Point_()
    : trajectory_point()
    , vehicle_info()
    , goal_id(0.0)
    , preview_id(0.0)
    , lateral_distance_error(0.0)
    , max_lateral_distance_error(0.0)
    , average_lateral_distance_error(0.0)
    , velocity_error(0.0)
    , max_velocity_error(0.0)
    , average_velocity_error(0.0)
    , heading_error(0.0)
    , max_heading_error(0.0)
    , average_heading_error(0.0)
    , computational_time(0.0)
    , average_computational_time(0.0)
    , max_computational_time(0.0)
    , slope(0.0)  {
    }
  Augmented_My_Trajectory_Point_(const ContainerAllocator& _alloc)
    : trajectory_point(_alloc)
    , vehicle_info(_alloc)
    , goal_id(0.0)
    , preview_id(0.0)
    , lateral_distance_error(0.0)
    , max_lateral_distance_error(0.0)
    , average_lateral_distance_error(0.0)
    , velocity_error(0.0)
    , max_velocity_error(0.0)
    , average_velocity_error(0.0)
    , heading_error(0.0)
    , max_heading_error(0.0)
    , average_heading_error(0.0)
    , computational_time(0.0)
    , average_computational_time(0.0)
    , max_computational_time(0.0)
    , slope(0.0)  {
  (void)_alloc;
    }



   typedef  ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator>  _trajectory_point_type;
  _trajectory_point_type trajectory_point;

   typedef  ::smartcar_msgs::VehicleInfo_<ContainerAllocator>  _vehicle_info_type;
  _vehicle_info_type vehicle_info;

   typedef double _goal_id_type;
  _goal_id_type goal_id;

   typedef double _preview_id_type;
  _preview_id_type preview_id;

   typedef double _lateral_distance_error_type;
  _lateral_distance_error_type lateral_distance_error;

   typedef double _max_lateral_distance_error_type;
  _max_lateral_distance_error_type max_lateral_distance_error;

   typedef double _average_lateral_distance_error_type;
  _average_lateral_distance_error_type average_lateral_distance_error;

   typedef double _velocity_error_type;
  _velocity_error_type velocity_error;

   typedef double _max_velocity_error_type;
  _max_velocity_error_type max_velocity_error;

   typedef double _average_velocity_error_type;
  _average_velocity_error_type average_velocity_error;

   typedef double _heading_error_type;
  _heading_error_type heading_error;

   typedef double _max_heading_error_type;
  _max_heading_error_type max_heading_error;

   typedef double _average_heading_error_type;
  _average_heading_error_type average_heading_error;

   typedef double _computational_time_type;
  _computational_time_type computational_time;

   typedef double _average_computational_time_type;
  _average_computational_time_type average_computational_time;

   typedef double _max_computational_time_type;
  _max_computational_time_type max_computational_time;

   typedef double _slope_type;
  _slope_type slope;





  typedef boost::shared_ptr< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> const> ConstPtr;

}; // struct Augmented_My_Trajectory_Point_

typedef ::smartcar_msgs::Augmented_My_Trajectory_Point_<std::allocator<void> > Augmented_My_Trajectory_Point;

typedef boost::shared_ptr< ::smartcar_msgs::Augmented_My_Trajectory_Point > Augmented_My_Trajectory_PointPtr;
typedef boost::shared_ptr< ::smartcar_msgs::Augmented_My_Trajectory_Point const> Augmented_My_Trajectory_PointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator2> & rhs)
{
  return lhs.trajectory_point == rhs.trajectory_point &&
    lhs.vehicle_info == rhs.vehicle_info &&
    lhs.goal_id == rhs.goal_id &&
    lhs.preview_id == rhs.preview_id &&
    lhs.lateral_distance_error == rhs.lateral_distance_error &&
    lhs.max_lateral_distance_error == rhs.max_lateral_distance_error &&
    lhs.average_lateral_distance_error == rhs.average_lateral_distance_error &&
    lhs.velocity_error == rhs.velocity_error &&
    lhs.max_velocity_error == rhs.max_velocity_error &&
    lhs.average_velocity_error == rhs.average_velocity_error &&
    lhs.heading_error == rhs.heading_error &&
    lhs.max_heading_error == rhs.max_heading_error &&
    lhs.average_heading_error == rhs.average_heading_error &&
    lhs.computational_time == rhs.computational_time &&
    lhs.average_computational_time == rhs.average_computational_time &&
    lhs.max_computational_time == rhs.max_computational_time &&
    lhs.slope == rhs.slope;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator1> & lhs, const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smartcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7730dde01d7004063a0f1a42c12ce23e";
  }

  static const char* value(const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7730dde01d700406ULL;
  static const uint64_t static_value2 = 0x3a0f1a42c12ce23eULL;
};

template<class ContainerAllocator>
struct DataType< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smartcar_msgs/Augmented_My_Trajectory_Point";
  }

  static const char* value(const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "My_Trajectory_Point trajectory_point\n"
"VehicleInfo vehicle_info\n"
"float64 goal_id\n"
"float64 preview_id\n"
"float64 lateral_distance_error\n"
"float64 max_lateral_distance_error\n"
"float64 average_lateral_distance_error\n"
"float64 velocity_error\n"
"float64 max_velocity_error\n"
"float64 average_velocity_error\n"
"float64 heading_error\n"
"float64 max_heading_error\n"
"float64 average_heading_error\n"
"float64 computational_time\n"
"float64 average_computational_time\n"
"float64 max_computational_time\n"
"float64 slope\n"
"\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/My_Trajectory_Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 theta\n"
"float64 kappa\n"
"float64 s\n"
"float64 l\n"
"float64 dkappa\n"
"float64 ddkappa\n"
"float64 v\n"
"float64 a\n"
"float64 relative_time\n"
"float64 gear\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/VehicleInfo\n"
"Header header\n"
"geometry_msgs/Point localization\n"
"LongitudinalData longitudinal_data\n"
"LateralData lateral_data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/LongitudinalData\n"
"float64 vel_from_localization\n"
"float64 vel_from_wheels\n"
"float64 acceleration\n"
"float64 traveled_distance\n"
"float64 fl_wheel_angular_velocity\n"
"float64 fr_wheel_angular_velocity\n"
"float64 bl_wheel_angular_velocity\n"
"float64 br_wheel_angular_velocity\n"
"float64 gas_percent\n"
"float64 fl_gas_torque\n"
"float64 fr_gas_torque\n"
"float64 bl_gas_torque\n"
"float64 br_gas_torque\n"
"float64 fl_brake_Torque\n"
"float64 fr_brake_torque\n"
"float64 bl_brake_torque\n"
"float64 br_brake_torque\n"
"\n"
"================================================================================\n"
"MSG: smartcar_msgs/LateralData\n"
"float64 heading_angle\n"
"float64 steering_wheel_angle_actual\n"
"float64 steering_wheel_expected\n"
"float64 steering_wheel_error\n"
"float64 steering_wheel_cmd\n"
"\n"
"float64 fl_steering_angle_actual\n"
"float64 fr_steering_angle_actual\n"
"float64 single_track_steering_angle\n"
"float64 fl_steering_angle_expected\n"
"float64 fr_steering_angle_expected\n"
"float64 fl_steering_error\n"
"float64 fr_steering_error\n"
"float64 fl_steering_cmd\n"
"float64 fr_steering_cmd\n"
"\n"
;
  }

  static const char* value(const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectory_point);
      stream.next(m.vehicle_info);
      stream.next(m.goal_id);
      stream.next(m.preview_id);
      stream.next(m.lateral_distance_error);
      stream.next(m.max_lateral_distance_error);
      stream.next(m.average_lateral_distance_error);
      stream.next(m.velocity_error);
      stream.next(m.max_velocity_error);
      stream.next(m.average_velocity_error);
      stream.next(m.heading_error);
      stream.next(m.max_heading_error);
      stream.next(m.average_heading_error);
      stream.next(m.computational_time);
      stream.next(m.average_computational_time);
      stream.next(m.max_computational_time);
      stream.next(m.slope);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Augmented_My_Trajectory_Point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smartcar_msgs::Augmented_My_Trajectory_Point_<ContainerAllocator>& v)
  {
    s << indent << "trajectory_point: ";
    s << std::endl;
    Printer< ::smartcar_msgs::My_Trajectory_Point_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_point);
    s << indent << "vehicle_info: ";
    s << std::endl;
    Printer< ::smartcar_msgs::VehicleInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_info);
    s << indent << "goal_id: ";
    Printer<double>::stream(s, indent + "  ", v.goal_id);
    s << indent << "preview_id: ";
    Printer<double>::stream(s, indent + "  ", v.preview_id);
    s << indent << "lateral_distance_error: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_distance_error);
    s << indent << "max_lateral_distance_error: ";
    Printer<double>::stream(s, indent + "  ", v.max_lateral_distance_error);
    s << indent << "average_lateral_distance_error: ";
    Printer<double>::stream(s, indent + "  ", v.average_lateral_distance_error);
    s << indent << "velocity_error: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_error);
    s << indent << "max_velocity_error: ";
    Printer<double>::stream(s, indent + "  ", v.max_velocity_error);
    s << indent << "average_velocity_error: ";
    Printer<double>::stream(s, indent + "  ", v.average_velocity_error);
    s << indent << "heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.heading_error);
    s << indent << "max_heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.max_heading_error);
    s << indent << "average_heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.average_heading_error);
    s << indent << "computational_time: ";
    Printer<double>::stream(s, indent + "  ", v.computational_time);
    s << indent << "average_computational_time: ";
    Printer<double>::stream(s, indent + "  ", v.average_computational_time);
    s << indent << "max_computational_time: ";
    Printer<double>::stream(s, indent + "  ", v.max_computational_time);
    s << indent << "slope: ";
    Printer<double>::stream(s, indent + "  ", v.slope);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTCAR_MSGS_MESSAGE_AUGMENTED_MY_TRAJECTORY_POINT_H
