// Generated by gencpp from file object_msgs/TrafficLightState.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_TRAFFICLIGHTSTATE_H
#define OBJECT_MSGS_MESSAGE_TRAFFICLIGHTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_msgs/LampState.h>

namespace object_msgs
{
template <class ContainerAllocator>
struct TrafficLightState_
{
  typedef TrafficLightState_<ContainerAllocator> Type;

  TrafficLightState_()
    : lamp_states()
    , id(0)  {
    }
  TrafficLightState_(const ContainerAllocator& _alloc)
    : lamp_states(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::object_msgs::LampState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::object_msgs::LampState_<ContainerAllocator> >> _lamp_states_type;
  _lamp_states_type lamp_states;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::object_msgs::TrafficLightState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::TrafficLightState_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightState_

typedef ::object_msgs::TrafficLightState_<std::allocator<void> > TrafficLightState;

typedef boost::shared_ptr< ::object_msgs::TrafficLightState > TrafficLightStatePtr;
typedef boost::shared_ptr< ::object_msgs::TrafficLightState const> TrafficLightStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::TrafficLightState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::TrafficLightState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_msgs::TrafficLightState_<ContainerAllocator1> & lhs, const ::object_msgs::TrafficLightState_<ContainerAllocator2> & rhs)
{
  return lhs.lamp_states == rhs.lamp_states &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_msgs::TrafficLightState_<ContainerAllocator1> & lhs, const ::object_msgs::TrafficLightState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_msgs::TrafficLightState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::TrafficLightState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::TrafficLightState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::TrafficLightState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::TrafficLightState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::TrafficLightState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::TrafficLightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8e13d98ab9da18d92f4dd32e357fa36";
  }

  static const char* value(const ::object_msgs::TrafficLightState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8e13d98ab9da18dULL;
  static const uint64_t static_value2 = 0x92f4dd32e357fa36ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::TrafficLightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/TrafficLightState";
  }

  static const char* value(const ::object_msgs::TrafficLightState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::TrafficLightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/LampState[] lamp_states\n"
"int32 id\n"
"================================================================================\n"
"MSG: object_msgs/LampState\n"
"uint8 UNKNOWN=0\n"
"uint8 RED=1\n"
"uint8 GREEN=2\n"
"uint8 YELLOW=3\n"
"uint8 LEFT=4\n"
"uint8 RIGHT=5\n"
"uint8 UP=6\n"
"uint8 DOWN=7\n"
"uint32 type\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::object_msgs::TrafficLightState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::TrafficLightState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lamp_states);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::TrafficLightState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::TrafficLightState_<ContainerAllocator>& v)
  {
    s << indent << "lamp_states[]" << std::endl;
    for (size_t i = 0; i < v.lamp_states.size(); ++i)
    {
      s << indent << "  lamp_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::LampState_<ContainerAllocator> >::stream(s, indent + "    ", v.lamp_states[i]);
    }
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_TRAFFICLIGHTSTATE_H
