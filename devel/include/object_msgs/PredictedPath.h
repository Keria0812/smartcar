// Generated by gencpp from file object_msgs/PredictedPath.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_PREDICTEDPATH_H
#define OBJECT_MSGS_MESSAGE_PREDICTEDPATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovarianceStamped.h>

namespace object_msgs
{
template <class ContainerAllocator>
struct PredictedPath_
{
  typedef PredictedPath_<ContainerAllocator> Type;

  PredictedPath_()
    : path()
    , confidence(0.0)  {
    }
  PredictedPath_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >> _path_type;
  _path_type path;

   typedef double _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::object_msgs::PredictedPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::PredictedPath_<ContainerAllocator> const> ConstPtr;

}; // struct PredictedPath_

typedef ::object_msgs::PredictedPath_<std::allocator<void> > PredictedPath;

typedef boost::shared_ptr< ::object_msgs::PredictedPath > PredictedPathPtr;
typedef boost::shared_ptr< ::object_msgs::PredictedPath const> PredictedPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::PredictedPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::PredictedPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_msgs::PredictedPath_<ContainerAllocator1> & lhs, const ::object_msgs::PredictedPath_<ContainerAllocator2> & rhs)
{
  return lhs.path == rhs.path &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_msgs::PredictedPath_<ContainerAllocator1> & lhs, const ::object_msgs::PredictedPath_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_msgs::PredictedPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::PredictedPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::PredictedPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::PredictedPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::PredictedPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::PredictedPath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::PredictedPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b9e27a803c09e023bbcf434ae2d9a3d";
  }

  static const char* value(const ::object_msgs::PredictedPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b9e27a803c09e02ULL;
  static const uint64_t static_value2 = 0x3bbcf434ae2d9a3dULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::PredictedPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/PredictedPath";
  }

  static const char* value(const ::object_msgs::PredictedPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::PredictedPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseWithCovarianceStamped[] path\n"
"float64 confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::object_msgs::PredictedPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::PredictedPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictedPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::PredictedPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::PredictedPath_<ContainerAllocator>& v)
  {
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_PREDICTEDPATH_H
