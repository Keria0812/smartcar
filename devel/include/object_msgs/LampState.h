// Generated by gencpp from file object_msgs/LampState.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_LAMPSTATE_H
#define OBJECT_MSGS_MESSAGE_LAMPSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_msgs
{
template <class ContainerAllocator>
struct LampState_
{
  typedef LampState_<ContainerAllocator> Type;

  LampState_()
    : type(0)
    , confidence(0.0)  {
    }
  LampState_(const ContainerAllocator& _alloc)
    : type(0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _type_type;
  _type_type type;

   typedef float _confidence_type;
  _confidence_type confidence;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(RED)
  #undef RED
#endif
#if defined(_WIN32) && defined(GREEN)
  #undef GREEN
#endif
#if defined(_WIN32) && defined(YELLOW)
  #undef YELLOW
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif
#if defined(_WIN32) && defined(UP)
  #undef UP
#endif
#if defined(_WIN32) && defined(DOWN)
  #undef DOWN
#endif

  enum {
    UNKNOWN = 0u,
    RED = 1u,
    GREEN = 2u,
    YELLOW = 3u,
    LEFT = 4u,
    RIGHT = 5u,
    UP = 6u,
    DOWN = 7u,
  };


  typedef boost::shared_ptr< ::object_msgs::LampState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::LampState_<ContainerAllocator> const> ConstPtr;

}; // struct LampState_

typedef ::object_msgs::LampState_<std::allocator<void> > LampState;

typedef boost::shared_ptr< ::object_msgs::LampState > LampStatePtr;
typedef boost::shared_ptr< ::object_msgs::LampState const> LampStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::LampState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::LampState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_msgs::LampState_<ContainerAllocator1> & lhs, const ::object_msgs::LampState_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_msgs::LampState_<ContainerAllocator1> & lhs, const ::object_msgs::LampState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_msgs::LampState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::LampState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::LampState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::LampState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::LampState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::LampState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::LampState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8cad4711cafcd7eacf519c83ac882e0";
  }

  static const char* value(const ::object_msgs::LampState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8cad4711cafcd7eULL;
  static const uint64_t static_value2 = 0xacf519c83ac882e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::LampState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/LampState";
  }

  static const char* value(const ::object_msgs::LampState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::LampState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UNKNOWN=0\n"
"uint8 RED=1\n"
"uint8 GREEN=2\n"
"uint8 YELLOW=3\n"
"uint8 LEFT=4\n"
"uint8 RIGHT=5\n"
"uint8 UP=6\n"
"uint8 DOWN=7\n"
"uint32 type\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::object_msgs::LampState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::LampState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LampState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::LampState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::LampState_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.type);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_LAMPSTATE_H
