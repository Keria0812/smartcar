# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/DimensionInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DimensionInfo(genpy.Message):
  _md5sum = "83b23d28199a7ca222af4ff1d8a32e6b"
  _type = "smartcar_msgs/DimensionInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 wheel_base
float64 front_wheel_base
float64 rear_wheel_base
float64 track
float64 mass
float64 front_cornering_stiffness
float64 rear_cornering_stiffness
float64 max_friction_coefficient
float64 Iz
"""
  __slots__ = ['wheel_base','front_wheel_base','rear_wheel_base','track','mass','front_cornering_stiffness','rear_cornering_stiffness','max_friction_coefficient','Iz']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wheel_base,front_wheel_base,rear_wheel_base,track,mass,front_cornering_stiffness,rear_cornering_stiffness,max_friction_coefficient,Iz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DimensionInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.wheel_base is None:
        self.wheel_base = 0.
      if self.front_wheel_base is None:
        self.front_wheel_base = 0.
      if self.rear_wheel_base is None:
        self.rear_wheel_base = 0.
      if self.track is None:
        self.track = 0.
      if self.mass is None:
        self.mass = 0.
      if self.front_cornering_stiffness is None:
        self.front_cornering_stiffness = 0.
      if self.rear_cornering_stiffness is None:
        self.rear_cornering_stiffness = 0.
      if self.max_friction_coefficient is None:
        self.max_friction_coefficient = 0.
      if self.Iz is None:
        self.Iz = 0.
    else:
      self.wheel_base = 0.
      self.front_wheel_base = 0.
      self.rear_wheel_base = 0.
      self.track = 0.
      self.mass = 0.
      self.front_cornering_stiffness = 0.
      self.rear_cornering_stiffness = 0.
      self.max_friction_coefficient = 0.
      self.Iz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.wheel_base, _x.front_wheel_base, _x.rear_wheel_base, _x.track, _x.mass, _x.front_cornering_stiffness, _x.rear_cornering_stiffness, _x.max_friction_coefficient, _x.Iz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.wheel_base, _x.front_wheel_base, _x.rear_wheel_base, _x.track, _x.mass, _x.front_cornering_stiffness, _x.rear_cornering_stiffness, _x.max_friction_coefficient, _x.Iz,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.wheel_base, _x.front_wheel_base, _x.rear_wheel_base, _x.track, _x.mass, _x.front_cornering_stiffness, _x.rear_cornering_stiffness, _x.max_friction_coefficient, _x.Iz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.wheel_base, _x.front_wheel_base, _x.rear_wheel_base, _x.track, _x.mass, _x.front_cornering_stiffness, _x.rear_cornering_stiffness, _x.max_friction_coefficient, _x.Iz,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
