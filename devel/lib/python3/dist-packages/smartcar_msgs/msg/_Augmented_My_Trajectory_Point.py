# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/Augmented_My_Trajectory_Point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import smartcar_msgs.msg
import std_msgs.msg

class Augmented_My_Trajectory_Point(genpy.Message):
  _md5sum = "7730dde01d7004063a0f1a42c12ce23e"
  _type = "smartcar_msgs/Augmented_My_Trajectory_Point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """My_Trajectory_Point trajectory_point
VehicleInfo vehicle_info
float64 goal_id
float64 preview_id
float64 lateral_distance_error
float64 max_lateral_distance_error
float64 average_lateral_distance_error
float64 velocity_error
float64 max_velocity_error
float64 average_velocity_error
float64 heading_error
float64 max_heading_error
float64 average_heading_error
float64 computational_time
float64 average_computational_time
float64 max_computational_time
float64 slope


================================================================================
MSG: smartcar_msgs/My_Trajectory_Point
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 l
float64 dkappa
float64 ddkappa
float64 v
float64 a
float64 relative_time
float64 gear

================================================================================
MSG: smartcar_msgs/VehicleInfo
Header header
geometry_msgs/Point localization
LongitudinalData longitudinal_data
LateralData lateral_data


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: smartcar_msgs/LongitudinalData
float64 vel_from_localization
float64 vel_from_wheels
float64 acceleration
float64 traveled_distance
float64 fl_wheel_angular_velocity
float64 fr_wheel_angular_velocity
float64 bl_wheel_angular_velocity
float64 br_wheel_angular_velocity
float64 gas_percent
float64 fl_gas_torque
float64 fr_gas_torque
float64 bl_gas_torque
float64 br_gas_torque
float64 fl_brake_Torque
float64 fr_brake_torque
float64 bl_brake_torque
float64 br_brake_torque

================================================================================
MSG: smartcar_msgs/LateralData
float64 heading_angle
float64 steering_wheel_angle_actual
float64 steering_wheel_expected
float64 steering_wheel_error
float64 steering_wheel_cmd

float64 fl_steering_angle_actual
float64 fr_steering_angle_actual
float64 single_track_steering_angle
float64 fl_steering_angle_expected
float64 fr_steering_angle_expected
float64 fl_steering_error
float64 fr_steering_error
float64 fl_steering_cmd
float64 fr_steering_cmd

"""
  __slots__ = ['trajectory_point','vehicle_info','goal_id','preview_id','lateral_distance_error','max_lateral_distance_error','average_lateral_distance_error','velocity_error','max_velocity_error','average_velocity_error','heading_error','max_heading_error','average_heading_error','computational_time','average_computational_time','max_computational_time','slope']
  _slot_types = ['smartcar_msgs/My_Trajectory_Point','smartcar_msgs/VehicleInfo','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory_point,vehicle_info,goal_id,preview_id,lateral_distance_error,max_lateral_distance_error,average_lateral_distance_error,velocity_error,max_velocity_error,average_velocity_error,heading_error,max_heading_error,average_heading_error,computational_time,average_computational_time,max_computational_time,slope

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Augmented_My_Trajectory_Point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectory_point is None:
        self.trajectory_point = smartcar_msgs.msg.My_Trajectory_Point()
      if self.vehicle_info is None:
        self.vehicle_info = smartcar_msgs.msg.VehicleInfo()
      if self.goal_id is None:
        self.goal_id = 0.
      if self.preview_id is None:
        self.preview_id = 0.
      if self.lateral_distance_error is None:
        self.lateral_distance_error = 0.
      if self.max_lateral_distance_error is None:
        self.max_lateral_distance_error = 0.
      if self.average_lateral_distance_error is None:
        self.average_lateral_distance_error = 0.
      if self.velocity_error is None:
        self.velocity_error = 0.
      if self.max_velocity_error is None:
        self.max_velocity_error = 0.
      if self.average_velocity_error is None:
        self.average_velocity_error = 0.
      if self.heading_error is None:
        self.heading_error = 0.
      if self.max_heading_error is None:
        self.max_heading_error = 0.
      if self.average_heading_error is None:
        self.average_heading_error = 0.
      if self.computational_time is None:
        self.computational_time = 0.
      if self.average_computational_time is None:
        self.average_computational_time = 0.
      if self.max_computational_time is None:
        self.max_computational_time = 0.
      if self.slope is None:
        self.slope = 0.
    else:
      self.trajectory_point = smartcar_msgs.msg.My_Trajectory_Point()
      self.vehicle_info = smartcar_msgs.msg.VehicleInfo()
      self.goal_id = 0.
      self.preview_id = 0.
      self.lateral_distance_error = 0.
      self.max_lateral_distance_error = 0.
      self.average_lateral_distance_error = 0.
      self.velocity_error = 0.
      self.max_velocity_error = 0.
      self.average_velocity_error = 0.
      self.heading_error = 0.
      self.max_heading_error = 0.
      self.average_heading_error = 0.
      self.computational_time = 0.
      self.average_computational_time = 0.
      self.max_computational_time = 0.
      self.slope = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13d3I().pack(_x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.z, _x.trajectory_point.theta, _x.trajectory_point.kappa, _x.trajectory_point.s, _x.trajectory_point.l, _x.trajectory_point.dkappa, _x.trajectory_point.ddkappa, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.gear, _x.vehicle_info.header.seq, _x.vehicle_info.header.stamp.secs, _x.vehicle_info.header.stamp.nsecs))
      _x = self.vehicle_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_49d().pack(_x.vehicle_info.localization.x, _x.vehicle_info.localization.y, _x.vehicle_info.localization.z, _x.vehicle_info.longitudinal_data.vel_from_localization, _x.vehicle_info.longitudinal_data.vel_from_wheels, _x.vehicle_info.longitudinal_data.acceleration, _x.vehicle_info.longitudinal_data.traveled_distance, _x.vehicle_info.longitudinal_data.fl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.fr_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.bl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.br_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.gas_percent, _x.vehicle_info.longitudinal_data.fl_gas_torque, _x.vehicle_info.longitudinal_data.fr_gas_torque, _x.vehicle_info.longitudinal_data.bl_gas_torque, _x.vehicle_info.longitudinal_data.br_gas_torque, _x.vehicle_info.longitudinal_data.fl_brake_Torque, _x.vehicle_info.longitudinal_data.fr_brake_torque, _x.vehicle_info.longitudinal_data.bl_brake_torque, _x.vehicle_info.longitudinal_data.br_brake_torque, _x.vehicle_info.lateral_data.heading_angle, _x.vehicle_info.lateral_data.steering_wheel_angle_actual, _x.vehicle_info.lateral_data.steering_wheel_expected, _x.vehicle_info.lateral_data.steering_wheel_error, _x.vehicle_info.lateral_data.steering_wheel_cmd, _x.vehicle_info.lateral_data.fl_steering_angle_actual, _x.vehicle_info.lateral_data.fr_steering_angle_actual, _x.vehicle_info.lateral_data.single_track_steering_angle, _x.vehicle_info.lateral_data.fl_steering_angle_expected, _x.vehicle_info.lateral_data.fr_steering_angle_expected, _x.vehicle_info.lateral_data.fl_steering_error, _x.vehicle_info.lateral_data.fr_steering_error, _x.vehicle_info.lateral_data.fl_steering_cmd, _x.vehicle_info.lateral_data.fr_steering_cmd, _x.goal_id, _x.preview_id, _x.lateral_distance_error, _x.max_lateral_distance_error, _x.average_lateral_distance_error, _x.velocity_error, _x.max_velocity_error, _x.average_velocity_error, _x.heading_error, _x.max_heading_error, _x.average_heading_error, _x.computational_time, _x.average_computational_time, _x.max_computational_time, _x.slope))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_point is None:
        self.trajectory_point = smartcar_msgs.msg.My_Trajectory_Point()
      if self.vehicle_info is None:
        self.vehicle_info = smartcar_msgs.msg.VehicleInfo()
      end = 0
      _x = self
      start = end
      end += 116
      (_x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.z, _x.trajectory_point.theta, _x.trajectory_point.kappa, _x.trajectory_point.s, _x.trajectory_point.l, _x.trajectory_point.dkappa, _x.trajectory_point.ddkappa, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.gear, _x.vehicle_info.header.seq, _x.vehicle_info.header.stamp.secs, _x.vehicle_info.header.stamp.nsecs,) = _get_struct_13d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 392
      (_x.vehicle_info.localization.x, _x.vehicle_info.localization.y, _x.vehicle_info.localization.z, _x.vehicle_info.longitudinal_data.vel_from_localization, _x.vehicle_info.longitudinal_data.vel_from_wheels, _x.vehicle_info.longitudinal_data.acceleration, _x.vehicle_info.longitudinal_data.traveled_distance, _x.vehicle_info.longitudinal_data.fl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.fr_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.bl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.br_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.gas_percent, _x.vehicle_info.longitudinal_data.fl_gas_torque, _x.vehicle_info.longitudinal_data.fr_gas_torque, _x.vehicle_info.longitudinal_data.bl_gas_torque, _x.vehicle_info.longitudinal_data.br_gas_torque, _x.vehicle_info.longitudinal_data.fl_brake_Torque, _x.vehicle_info.longitudinal_data.fr_brake_torque, _x.vehicle_info.longitudinal_data.bl_brake_torque, _x.vehicle_info.longitudinal_data.br_brake_torque, _x.vehicle_info.lateral_data.heading_angle, _x.vehicle_info.lateral_data.steering_wheel_angle_actual, _x.vehicle_info.lateral_data.steering_wheel_expected, _x.vehicle_info.lateral_data.steering_wheel_error, _x.vehicle_info.lateral_data.steering_wheel_cmd, _x.vehicle_info.lateral_data.fl_steering_angle_actual, _x.vehicle_info.lateral_data.fr_steering_angle_actual, _x.vehicle_info.lateral_data.single_track_steering_angle, _x.vehicle_info.lateral_data.fl_steering_angle_expected, _x.vehicle_info.lateral_data.fr_steering_angle_expected, _x.vehicle_info.lateral_data.fl_steering_error, _x.vehicle_info.lateral_data.fr_steering_error, _x.vehicle_info.lateral_data.fl_steering_cmd, _x.vehicle_info.lateral_data.fr_steering_cmd, _x.goal_id, _x.preview_id, _x.lateral_distance_error, _x.max_lateral_distance_error, _x.average_lateral_distance_error, _x.velocity_error, _x.max_velocity_error, _x.average_velocity_error, _x.heading_error, _x.max_heading_error, _x.average_heading_error, _x.computational_time, _x.average_computational_time, _x.max_computational_time, _x.slope,) = _get_struct_49d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13d3I().pack(_x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.z, _x.trajectory_point.theta, _x.trajectory_point.kappa, _x.trajectory_point.s, _x.trajectory_point.l, _x.trajectory_point.dkappa, _x.trajectory_point.ddkappa, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.gear, _x.vehicle_info.header.seq, _x.vehicle_info.header.stamp.secs, _x.vehicle_info.header.stamp.nsecs))
      _x = self.vehicle_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_49d().pack(_x.vehicle_info.localization.x, _x.vehicle_info.localization.y, _x.vehicle_info.localization.z, _x.vehicle_info.longitudinal_data.vel_from_localization, _x.vehicle_info.longitudinal_data.vel_from_wheels, _x.vehicle_info.longitudinal_data.acceleration, _x.vehicle_info.longitudinal_data.traveled_distance, _x.vehicle_info.longitudinal_data.fl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.fr_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.bl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.br_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.gas_percent, _x.vehicle_info.longitudinal_data.fl_gas_torque, _x.vehicle_info.longitudinal_data.fr_gas_torque, _x.vehicle_info.longitudinal_data.bl_gas_torque, _x.vehicle_info.longitudinal_data.br_gas_torque, _x.vehicle_info.longitudinal_data.fl_brake_Torque, _x.vehicle_info.longitudinal_data.fr_brake_torque, _x.vehicle_info.longitudinal_data.bl_brake_torque, _x.vehicle_info.longitudinal_data.br_brake_torque, _x.vehicle_info.lateral_data.heading_angle, _x.vehicle_info.lateral_data.steering_wheel_angle_actual, _x.vehicle_info.lateral_data.steering_wheel_expected, _x.vehicle_info.lateral_data.steering_wheel_error, _x.vehicle_info.lateral_data.steering_wheel_cmd, _x.vehicle_info.lateral_data.fl_steering_angle_actual, _x.vehicle_info.lateral_data.fr_steering_angle_actual, _x.vehicle_info.lateral_data.single_track_steering_angle, _x.vehicle_info.lateral_data.fl_steering_angle_expected, _x.vehicle_info.lateral_data.fr_steering_angle_expected, _x.vehicle_info.lateral_data.fl_steering_error, _x.vehicle_info.lateral_data.fr_steering_error, _x.vehicle_info.lateral_data.fl_steering_cmd, _x.vehicle_info.lateral_data.fr_steering_cmd, _x.goal_id, _x.preview_id, _x.lateral_distance_error, _x.max_lateral_distance_error, _x.average_lateral_distance_error, _x.velocity_error, _x.max_velocity_error, _x.average_velocity_error, _x.heading_error, _x.max_heading_error, _x.average_heading_error, _x.computational_time, _x.average_computational_time, _x.max_computational_time, _x.slope))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_point is None:
        self.trajectory_point = smartcar_msgs.msg.My_Trajectory_Point()
      if self.vehicle_info is None:
        self.vehicle_info = smartcar_msgs.msg.VehicleInfo()
      end = 0
      _x = self
      start = end
      end += 116
      (_x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.z, _x.trajectory_point.theta, _x.trajectory_point.kappa, _x.trajectory_point.s, _x.trajectory_point.l, _x.trajectory_point.dkappa, _x.trajectory_point.ddkappa, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.gear, _x.vehicle_info.header.seq, _x.vehicle_info.header.stamp.secs, _x.vehicle_info.header.stamp.nsecs,) = _get_struct_13d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 392
      (_x.vehicle_info.localization.x, _x.vehicle_info.localization.y, _x.vehicle_info.localization.z, _x.vehicle_info.longitudinal_data.vel_from_localization, _x.vehicle_info.longitudinal_data.vel_from_wheels, _x.vehicle_info.longitudinal_data.acceleration, _x.vehicle_info.longitudinal_data.traveled_distance, _x.vehicle_info.longitudinal_data.fl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.fr_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.bl_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.br_wheel_angular_velocity, _x.vehicle_info.longitudinal_data.gas_percent, _x.vehicle_info.longitudinal_data.fl_gas_torque, _x.vehicle_info.longitudinal_data.fr_gas_torque, _x.vehicle_info.longitudinal_data.bl_gas_torque, _x.vehicle_info.longitudinal_data.br_gas_torque, _x.vehicle_info.longitudinal_data.fl_brake_Torque, _x.vehicle_info.longitudinal_data.fr_brake_torque, _x.vehicle_info.longitudinal_data.bl_brake_torque, _x.vehicle_info.longitudinal_data.br_brake_torque, _x.vehicle_info.lateral_data.heading_angle, _x.vehicle_info.lateral_data.steering_wheel_angle_actual, _x.vehicle_info.lateral_data.steering_wheel_expected, _x.vehicle_info.lateral_data.steering_wheel_error, _x.vehicle_info.lateral_data.steering_wheel_cmd, _x.vehicle_info.lateral_data.fl_steering_angle_actual, _x.vehicle_info.lateral_data.fr_steering_angle_actual, _x.vehicle_info.lateral_data.single_track_steering_angle, _x.vehicle_info.lateral_data.fl_steering_angle_expected, _x.vehicle_info.lateral_data.fr_steering_angle_expected, _x.vehicle_info.lateral_data.fl_steering_error, _x.vehicle_info.lateral_data.fr_steering_error, _x.vehicle_info.lateral_data.fl_steering_cmd, _x.vehicle_info.lateral_data.fr_steering_cmd, _x.goal_id, _x.preview_id, _x.lateral_distance_error, _x.max_lateral_distance_error, _x.average_lateral_distance_error, _x.velocity_error, _x.max_velocity_error, _x.average_velocity_error, _x.heading_error, _x.max_heading_error, _x.average_heading_error, _x.computational_time, _x.average_computational_time, _x.max_computational_time, _x.slope,) = _get_struct_49d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d3I = None
def _get_struct_13d3I():
    global _struct_13d3I
    if _struct_13d3I is None:
        _struct_13d3I = struct.Struct("<13d3I")
    return _struct_13d3I
_struct_49d = None
def _get_struct_49d():
    global _struct_49d
    if _struct_49d is None:
        _struct_49d = struct.Struct("<49d")
    return _struct_49d
