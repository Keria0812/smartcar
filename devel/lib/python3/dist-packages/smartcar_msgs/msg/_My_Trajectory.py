# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/My_Trajectory.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import smartcar_msgs.msg
import std_msgs.msg

class My_Trajectory(genpy.Message):
  _md5sum = "71feceee353912c5f03c9c52a30dd4cf"
  _type = "smartcar_msgs/My_Trajectory"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int32 lane_id
bool ESTOP
My_Trajectory_Point[] trajectory_points
int32 num

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: smartcar_msgs/My_Trajectory_Point
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 l
float64 dkappa
float64 ddkappa
float64 v
float64 a
float64 relative_time
float64 gear
"""
  __slots__ = ['header','lane_id','ESTOP','trajectory_points','num']
  _slot_types = ['std_msgs/Header','int32','bool','smartcar_msgs/My_Trajectory_Point[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lane_id,ESTOP,trajectory_points,num

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(My_Trajectory, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lane_id is None:
        self.lane_id = 0
      if self.ESTOP is None:
        self.ESTOP = False
      if self.trajectory_points is None:
        self.trajectory_points = []
      if self.num is None:
        self.num = 0
    else:
      self.header = std_msgs.msg.Header()
      self.lane_id = 0
      self.ESTOP = False
      self.trajectory_points = []
      self.num = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.lane_id, _x.ESTOP))
      length = len(self.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_points:
        _x = val1
        buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trajectory_points is None:
        self.trajectory_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.lane_id, _x.ESTOP,) = _get_struct_iB().unpack(str[start:end])
      self.ESTOP = bool(self.ESTOP)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_points = []
      for i in range(0, length):
        val1 = smartcar_msgs.msg.My_Trajectory_Point()
        _x = val1
        start = end
        end += 104
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
        self.trajectory_points.append(val1)
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.lane_id, _x.ESTOP))
      length = len(self.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_points:
        _x = val1
        buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trajectory_points is None:
        self.trajectory_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.lane_id, _x.ESTOP,) = _get_struct_iB().unpack(str[start:end])
      self.ESTOP = bool(self.ESTOP)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_points = []
      for i in range(0, length):
        val1 = smartcar_msgs.msg.My_Trajectory_Point()
        _x = val1
        start = end
        end += 104
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
        self.trajectory_points.append(val1)
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
