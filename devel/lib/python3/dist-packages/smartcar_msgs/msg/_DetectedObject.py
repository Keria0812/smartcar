# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/DetectedObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import smartcar_msgs.msg
import std_msgs.msg

class DetectedObject(genpy.Message):
  _md5sum = "8263e8ba2bd27309693c5d19983a7eff"
  _type = "smartcar_msgs/DetectedObject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header

string                           id      #便于后续预测轨迹赋值每个点的id, 最后的id为perception_id+trajectory_index，即id=2_12，代表id为2的障碍物的第12个轨迹点。
string                          label
float32                         score   #Score as defined by the detection, Optional
std_msgs/ColorRGBA              color   # Define this object specific color
bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering

################ 3D BB
string                          space_frame #3D Space coordinate frame of the object, required if pose and dimensions are defines
float64                         x  #car frame x-forward y-left, z-up
float64                         y
float64                         z
float64                         heading
float32                         length
float32                         width
float32                         height
float32                         speed
geometry_msgs/Point             foot_lf #车辆坐标系下，左前
geometry_msgs/Point             foot_lr #左后
geometry_msgs/Point             foot_rf #右前
geometry_msgs/Point             foot_rr #右后


float64                         utm_x  #utm frame x-forward y-left, z-up
float64                         utm_y
float64                         utm_z
float64                         utm_heading
geometry_msgs/Point             utm_foot_lf
geometry_msgs/Point             utm_foot_lr
geometry_msgs/Point             utm_foot_rf
geometry_msgs/Point             utm_foot_rr
geometry_msgs/Twist             utm_twist


bool                            pose_reliable
bool                            velocity_reliable
bool                            acceleration_reliable

############### Indicator information
uint8                          indicator_state # INDICATOR_LEFT = 0, INDICATOR_RIGHT = 1, INDICATOR_BOTH = 2, INDICATOR_NONE = 3

############### Behavior State of the Detected Object
uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6

#
string[]                        user_defined_info
bool is_static

My_Trajectory trajectory_  #预测轨迹
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: smartcar_msgs/My_Trajectory
Header header
int32 lane_id
bool ESTOP
My_Trajectory_Point[] trajectory_points
int32 num

================================================================================
MSG: smartcar_msgs/My_Trajectory_Point
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 l
float64 dkappa
float64 ddkappa
float64 v
float64 a
float64 relative_time
float64 gear
"""
  __slots__ = ['header','id','label','score','color','valid','space_frame','x','y','z','heading','length','width','height','speed','foot_lf','foot_lr','foot_rf','foot_rr','utm_x','utm_y','utm_z','utm_heading','utm_foot_lf','utm_foot_lr','utm_foot_rf','utm_foot_rr','utm_twist','pose_reliable','velocity_reliable','acceleration_reliable','indicator_state','behavior_state','user_defined_info','is_static','trajectory_']
  _slot_types = ['std_msgs/Header','string','string','float32','std_msgs/ColorRGBA','bool','string','float64','float64','float64','float64','float32','float32','float32','float32','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float64','float64','float64','float64','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Twist','bool','bool','bool','uint8','uint8','string[]','bool','smartcar_msgs/My_Trajectory']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,label,score,color,valid,space_frame,x,y,z,heading,length,width,height,speed,foot_lf,foot_lr,foot_rf,foot_rr,utm_x,utm_y,utm_z,utm_heading,utm_foot_lf,utm_foot_lr,utm_foot_rf,utm_foot_rr,utm_twist,pose_reliable,velocity_reliable,acceleration_reliable,indicator_state,behavior_state,user_defined_info,is_static,trajectory_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = ''
      if self.label is None:
        self.label = ''
      if self.score is None:
        self.score = 0.
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.valid is None:
        self.valid = False
      if self.space_frame is None:
        self.space_frame = ''
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.heading is None:
        self.heading = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.speed is None:
        self.speed = 0.
      if self.foot_lf is None:
        self.foot_lf = geometry_msgs.msg.Point()
      if self.foot_lr is None:
        self.foot_lr = geometry_msgs.msg.Point()
      if self.foot_rf is None:
        self.foot_rf = geometry_msgs.msg.Point()
      if self.foot_rr is None:
        self.foot_rr = geometry_msgs.msg.Point()
      if self.utm_x is None:
        self.utm_x = 0.
      if self.utm_y is None:
        self.utm_y = 0.
      if self.utm_z is None:
        self.utm_z = 0.
      if self.utm_heading is None:
        self.utm_heading = 0.
      if self.utm_foot_lf is None:
        self.utm_foot_lf = geometry_msgs.msg.Point()
      if self.utm_foot_lr is None:
        self.utm_foot_lr = geometry_msgs.msg.Point()
      if self.utm_foot_rf is None:
        self.utm_foot_rf = geometry_msgs.msg.Point()
      if self.utm_foot_rr is None:
        self.utm_foot_rr = geometry_msgs.msg.Point()
      if self.utm_twist is None:
        self.utm_twist = geometry_msgs.msg.Twist()
      if self.pose_reliable is None:
        self.pose_reliable = False
      if self.velocity_reliable is None:
        self.velocity_reliable = False
      if self.acceleration_reliable is None:
        self.acceleration_reliable = False
      if self.indicator_state is None:
        self.indicator_state = 0
      if self.behavior_state is None:
        self.behavior_state = 0
      if self.user_defined_info is None:
        self.user_defined_info = []
      if self.is_static is None:
        self.is_static = False
      if self.trajectory_ is None:
        self.trajectory_ = smartcar_msgs.msg.My_Trajectory()
    else:
      self.header = std_msgs.msg.Header()
      self.id = ''
      self.label = ''
      self.score = 0.
      self.color = std_msgs.msg.ColorRGBA()
      self.valid = False
      self.space_frame = ''
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.heading = 0.
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.speed = 0.
      self.foot_lf = geometry_msgs.msg.Point()
      self.foot_lr = geometry_msgs.msg.Point()
      self.foot_rf = geometry_msgs.msg.Point()
      self.foot_rr = geometry_msgs.msg.Point()
      self.utm_x = 0.
      self.utm_y = 0.
      self.utm_z = 0.
      self.utm_heading = 0.
      self.utm_foot_lf = geometry_msgs.msg.Point()
      self.utm_foot_lr = geometry_msgs.msg.Point()
      self.utm_foot_rf = geometry_msgs.msg.Point()
      self.utm_foot_rr = geometry_msgs.msg.Point()
      self.utm_twist = geometry_msgs.msg.Twist()
      self.pose_reliable = False
      self.velocity_reliable = False
      self.acceleration_reliable = False
      self.indicator_state = 0
      self.behavior_state = 0
      self.user_defined_info = []
      self.is_static = False
      self.trajectory_ = smartcar_msgs.msg.My_Trajectory()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5fB().pack(_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid))
      _x = self.space_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d4f34d5B().pack(_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed, _x.foot_lf.x, _x.foot_lf.y, _x.foot_lf.z, _x.foot_lr.x, _x.foot_lr.y, _x.foot_lr.z, _x.foot_rf.x, _x.foot_rf.y, _x.foot_rf.z, _x.foot_rr.x, _x.foot_rr.y, _x.foot_rr.z, _x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading, _x.utm_foot_lf.x, _x.utm_foot_lf.y, _x.utm_foot_lf.z, _x.utm_foot_lr.x, _x.utm_foot_lr.y, _x.utm_foot_lr.z, _x.utm_foot_rf.x, _x.utm_foot_rf.y, _x.utm_foot_rf.z, _x.utm_foot_rr.x, _x.utm_foot_rr.y, _x.utm_foot_rr.z, _x.utm_twist.linear.x, _x.utm_twist.linear.y, _x.utm_twist.linear.z, _x.utm_twist.angular.x, _x.utm_twist.angular.y, _x.utm_twist.angular.z, _x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state))
      length = len(self.user_defined_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.user_defined_info:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.is_static, _x.trajectory_.header.seq, _x.trajectory_.header.stamp.secs, _x.trajectory_.header.stamp.nsecs))
      _x = self.trajectory_.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.trajectory_.lane_id, _x.trajectory_.ESTOP))
      length = len(self.trajectory_.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_.trajectory_points:
        _x = val1
        buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
      _x = self.trajectory_.num
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.foot_lf is None:
        self.foot_lf = geometry_msgs.msg.Point()
      if self.foot_lr is None:
        self.foot_lr = geometry_msgs.msg.Point()
      if self.foot_rf is None:
        self.foot_rf = geometry_msgs.msg.Point()
      if self.foot_rr is None:
        self.foot_rr = geometry_msgs.msg.Point()
      if self.utm_foot_lf is None:
        self.utm_foot_lf = geometry_msgs.msg.Point()
      if self.utm_foot_lr is None:
        self.utm_foot_lr = geometry_msgs.msg.Point()
      if self.utm_foot_rf is None:
        self.utm_foot_rf = geometry_msgs.msg.Point()
      if self.utm_foot_rr is None:
        self.utm_foot_rr = geometry_msgs.msg.Point()
      if self.utm_twist is None:
        self.utm_twist = geometry_msgs.msg.Twist()
      if self.trajectory_ is None:
        self.trajectory_ = smartcar_msgs.msg.My_Trajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid,) = _get_struct_5fB().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.space_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.space_frame = str[start:end]
      _x = self
      start = end
      end += 325
      (_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed, _x.foot_lf.x, _x.foot_lf.y, _x.foot_lf.z, _x.foot_lr.x, _x.foot_lr.y, _x.foot_lr.z, _x.foot_rf.x, _x.foot_rf.y, _x.foot_rf.z, _x.foot_rr.x, _x.foot_rr.y, _x.foot_rr.z, _x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading, _x.utm_foot_lf.x, _x.utm_foot_lf.y, _x.utm_foot_lf.z, _x.utm_foot_lr.x, _x.utm_foot_lr.y, _x.utm_foot_lr.z, _x.utm_foot_rf.x, _x.utm_foot_rf.y, _x.utm_foot_rf.z, _x.utm_foot_rr.x, _x.utm_foot_rr.y, _x.utm_foot_rr.z, _x.utm_twist.linear.x, _x.utm_twist.linear.y, _x.utm_twist.linear.z, _x.utm_twist.angular.x, _x.utm_twist.angular.y, _x.utm_twist.angular.z, _x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state,) = _get_struct_4d4f34d5B().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      self.velocity_reliable = bool(self.velocity_reliable)
      self.acceleration_reliable = bool(self.acceleration_reliable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.user_defined_info = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.user_defined_info.append(val1)
      _x = self
      start = end
      end += 13
      (_x.is_static, _x.trajectory_.header.seq, _x.trajectory_.header.stamp.secs, _x.trajectory_.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.is_static = bool(self.is_static)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory_.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.trajectory_.lane_id, _x.trajectory_.ESTOP,) = _get_struct_iB().unpack(str[start:end])
      self.trajectory_.ESTOP = bool(self.trajectory_.ESTOP)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_.trajectory_points = []
      for i in range(0, length):
        val1 = smartcar_msgs.msg.My_Trajectory_Point()
        _x = val1
        start = end
        end += 104
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
        self.trajectory_.trajectory_points.append(val1)
      start = end
      end += 4
      (self.trajectory_.num,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5fB().pack(_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid))
      _x = self.space_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d4f34d5B().pack(_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed, _x.foot_lf.x, _x.foot_lf.y, _x.foot_lf.z, _x.foot_lr.x, _x.foot_lr.y, _x.foot_lr.z, _x.foot_rf.x, _x.foot_rf.y, _x.foot_rf.z, _x.foot_rr.x, _x.foot_rr.y, _x.foot_rr.z, _x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading, _x.utm_foot_lf.x, _x.utm_foot_lf.y, _x.utm_foot_lf.z, _x.utm_foot_lr.x, _x.utm_foot_lr.y, _x.utm_foot_lr.z, _x.utm_foot_rf.x, _x.utm_foot_rf.y, _x.utm_foot_rf.z, _x.utm_foot_rr.x, _x.utm_foot_rr.y, _x.utm_foot_rr.z, _x.utm_twist.linear.x, _x.utm_twist.linear.y, _x.utm_twist.linear.z, _x.utm_twist.angular.x, _x.utm_twist.angular.y, _x.utm_twist.angular.z, _x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state))
      length = len(self.user_defined_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.user_defined_info:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.is_static, _x.trajectory_.header.seq, _x.trajectory_.header.stamp.secs, _x.trajectory_.header.stamp.nsecs))
      _x = self.trajectory_.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.trajectory_.lane_id, _x.trajectory_.ESTOP))
      length = len(self.trajectory_.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_.trajectory_points:
        _x = val1
        buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
      _x = self.trajectory_.num
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.foot_lf is None:
        self.foot_lf = geometry_msgs.msg.Point()
      if self.foot_lr is None:
        self.foot_lr = geometry_msgs.msg.Point()
      if self.foot_rf is None:
        self.foot_rf = geometry_msgs.msg.Point()
      if self.foot_rr is None:
        self.foot_rr = geometry_msgs.msg.Point()
      if self.utm_foot_lf is None:
        self.utm_foot_lf = geometry_msgs.msg.Point()
      if self.utm_foot_lr is None:
        self.utm_foot_lr = geometry_msgs.msg.Point()
      if self.utm_foot_rf is None:
        self.utm_foot_rf = geometry_msgs.msg.Point()
      if self.utm_foot_rr is None:
        self.utm_foot_rr = geometry_msgs.msg.Point()
      if self.utm_twist is None:
        self.utm_twist = geometry_msgs.msg.Twist()
      if self.trajectory_ is None:
        self.trajectory_ = smartcar_msgs.msg.My_Trajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid,) = _get_struct_5fB().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.space_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.space_frame = str[start:end]
      _x = self
      start = end
      end += 325
      (_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed, _x.foot_lf.x, _x.foot_lf.y, _x.foot_lf.z, _x.foot_lr.x, _x.foot_lr.y, _x.foot_lr.z, _x.foot_rf.x, _x.foot_rf.y, _x.foot_rf.z, _x.foot_rr.x, _x.foot_rr.y, _x.foot_rr.z, _x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading, _x.utm_foot_lf.x, _x.utm_foot_lf.y, _x.utm_foot_lf.z, _x.utm_foot_lr.x, _x.utm_foot_lr.y, _x.utm_foot_lr.z, _x.utm_foot_rf.x, _x.utm_foot_rf.y, _x.utm_foot_rf.z, _x.utm_foot_rr.x, _x.utm_foot_rr.y, _x.utm_foot_rr.z, _x.utm_twist.linear.x, _x.utm_twist.linear.y, _x.utm_twist.linear.z, _x.utm_twist.angular.x, _x.utm_twist.angular.y, _x.utm_twist.angular.z, _x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state,) = _get_struct_4d4f34d5B().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      self.velocity_reliable = bool(self.velocity_reliable)
      self.acceleration_reliable = bool(self.acceleration_reliable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.user_defined_info = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.user_defined_info.append(val1)
      _x = self
      start = end
      end += 13
      (_x.is_static, _x.trajectory_.header.seq, _x.trajectory_.header.stamp.secs, _x.trajectory_.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.is_static = bool(self.is_static)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory_.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.trajectory_.lane_id, _x.trajectory_.ESTOP,) = _get_struct_iB().unpack(str[start:end])
      self.trajectory_.ESTOP = bool(self.trajectory_.ESTOP)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_.trajectory_points = []
      for i in range(0, length):
        val1 = smartcar_msgs.msg.My_Trajectory_Point()
        _x = val1
        start = end
        end += 104
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
        self.trajectory_.trajectory_points.append(val1)
      start = end
      end += 4
      (self.trajectory_.num,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d4f34d5B = None
def _get_struct_4d4f34d5B():
    global _struct_4d4f34d5B
    if _struct_4d4f34d5B is None:
        _struct_4d4f34d5B = struct.Struct("<4d4f34d5B")
    return _struct_4d4f34d5B
_struct_5fB = None
def _get_struct_5fB():
    global _struct_5fB
    if _struct_5fB is None:
        _struct_5fB = struct.Struct("<5fB")
    return _struct_5fB
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
