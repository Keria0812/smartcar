# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/VehicleChassis.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import smartcar_msgs.msg
import std_msgs.msg

class VehicleChassis(genpy.Message):
  _md5sum = "ebba083aece22e9a5c6fc1592f401f4c"
  _type = "smartcar_msgs/VehicleChassis"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
#控制量
float64 cmd_torque  #N·m
float64 cmd_decelaration #m/s^2
float64 cmd_gas 
float64 cmd_brake
float64 cmd_steerAng #deg
#反馈量
float64 feedback_brake_press  #%100
float64 feedback_gas  #%100
float64 feedback_torque  #N·m
float64 feedback_Motor_rotv #round/min
float64 feedback_steerAng #deg
float64 feedback_tireAng #deg


bool gas_pedal_press
bool brake_pedal_press
string gear
float64[3] orientation #deg, Guass frame(deg), X-front, Y-right, Z-down pitch, roll, yaw
float64[3] linear_velocity  #km/h, Guass frame
float64[3] vehicleAcceleration #m/s^2 vehicle frame
float64[4] wheelspeed #FL、FR、RL、RR km/h

#EV
smartcar_msgs/VehicleLightState light_state #EV
#km/h
float64 vehiclespeed 

#vcu_mode, 0 manual_driving, 1 iECU , 2 remote_driving, 3 only control steer, 4 only control gas/brake
int32 vcu_mode  

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: smartcar_msgs/VehicleLightState
Header header
#0 mid, 1 turn left, 2 turn right
int32 turn_light 

#0 close, 1 small light, 2 dipped headlight, 3 headlights on full beam
int32 car_light
"""
  __slots__ = ['header','cmd_torque','cmd_decelaration','cmd_gas','cmd_brake','cmd_steerAng','feedback_brake_press','feedback_gas','feedback_torque','feedback_Motor_rotv','feedback_steerAng','feedback_tireAng','gas_pedal_press','brake_pedal_press','gear','orientation','linear_velocity','vehicleAcceleration','wheelspeed','light_state','vehiclespeed','vcu_mode']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','bool','string','float64[3]','float64[3]','float64[3]','float64[4]','smartcar_msgs/VehicleLightState','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,cmd_torque,cmd_decelaration,cmd_gas,cmd_brake,cmd_steerAng,feedback_brake_press,feedback_gas,feedback_torque,feedback_Motor_rotv,feedback_steerAng,feedback_tireAng,gas_pedal_press,brake_pedal_press,gear,orientation,linear_velocity,vehicleAcceleration,wheelspeed,light_state,vehiclespeed,vcu_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleChassis, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cmd_torque is None:
        self.cmd_torque = 0.
      if self.cmd_decelaration is None:
        self.cmd_decelaration = 0.
      if self.cmd_gas is None:
        self.cmd_gas = 0.
      if self.cmd_brake is None:
        self.cmd_brake = 0.
      if self.cmd_steerAng is None:
        self.cmd_steerAng = 0.
      if self.feedback_brake_press is None:
        self.feedback_brake_press = 0.
      if self.feedback_gas is None:
        self.feedback_gas = 0.
      if self.feedback_torque is None:
        self.feedback_torque = 0.
      if self.feedback_Motor_rotv is None:
        self.feedback_Motor_rotv = 0.
      if self.feedback_steerAng is None:
        self.feedback_steerAng = 0.
      if self.feedback_tireAng is None:
        self.feedback_tireAng = 0.
      if self.gas_pedal_press is None:
        self.gas_pedal_press = False
      if self.brake_pedal_press is None:
        self.brake_pedal_press = False
      if self.gear is None:
        self.gear = ''
      if self.orientation is None:
        self.orientation = [0.] * 3
      if self.linear_velocity is None:
        self.linear_velocity = [0.] * 3
      if self.vehicleAcceleration is None:
        self.vehicleAcceleration = [0.] * 3
      if self.wheelspeed is None:
        self.wheelspeed = [0.] * 4
      if self.light_state is None:
        self.light_state = smartcar_msgs.msg.VehicleLightState()
      if self.vehiclespeed is None:
        self.vehiclespeed = 0.
      if self.vcu_mode is None:
        self.vcu_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.cmd_torque = 0.
      self.cmd_decelaration = 0.
      self.cmd_gas = 0.
      self.cmd_brake = 0.
      self.cmd_steerAng = 0.
      self.feedback_brake_press = 0.
      self.feedback_gas = 0.
      self.feedback_torque = 0.
      self.feedback_Motor_rotv = 0.
      self.feedback_steerAng = 0.
      self.feedback_tireAng = 0.
      self.gas_pedal_press = False
      self.brake_pedal_press = False
      self.gear = ''
      self.orientation = [0.] * 3
      self.linear_velocity = [0.] * 3
      self.vehicleAcceleration = [0.] * 3
      self.wheelspeed = [0.] * 4
      self.light_state = smartcar_msgs.msg.VehicleLightState()
      self.vehiclespeed = 0.
      self.vcu_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11d2B().pack(_x.cmd_torque, _x.cmd_decelaration, _x.cmd_gas, _x.cmd_brake, _x.cmd_steerAng, _x.feedback_brake_press, _x.feedback_gas, _x.feedback_torque, _x.feedback_Motor_rotv, _x.feedback_steerAng, _x.feedback_tireAng, _x.gas_pedal_press, _x.brake_pedal_press))
      _x = self.gear
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3d().pack(*self.orientation))
      buff.write(_get_struct_3d().pack(*self.linear_velocity))
      buff.write(_get_struct_3d().pack(*self.vehicleAcceleration))
      buff.write(_get_struct_4d().pack(*self.wheelspeed))
      _x = self
      buff.write(_get_struct_3I().pack(_x.light_state.header.seq, _x.light_state.header.stamp.secs, _x.light_state.header.stamp.nsecs))
      _x = self.light_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2idi().pack(_x.light_state.turn_light, _x.light_state.car_light, _x.vehiclespeed, _x.vcu_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.light_state is None:
        self.light_state = smartcar_msgs.msg.VehicleLightState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.cmd_torque, _x.cmd_decelaration, _x.cmd_gas, _x.cmd_brake, _x.cmd_steerAng, _x.feedback_brake_press, _x.feedback_gas, _x.feedback_torque, _x.feedback_Motor_rotv, _x.feedback_steerAng, _x.feedback_tireAng, _x.gas_pedal_press, _x.brake_pedal_press,) = _get_struct_11d2B().unpack(str[start:end])
      self.gas_pedal_press = bool(self.gas_pedal_press)
      self.brake_pedal_press = bool(self.brake_pedal_press)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gear = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gear = str[start:end]
      start = end
      end += 24
      self.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.linear_velocity = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.vehicleAcceleration = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.wheelspeed = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.light_state.header.seq, _x.light_state.header.stamp.secs, _x.light_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.light_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.light_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.light_state.turn_light, _x.light_state.car_light, _x.vehiclespeed, _x.vcu_mode,) = _get_struct_2idi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11d2B().pack(_x.cmd_torque, _x.cmd_decelaration, _x.cmd_gas, _x.cmd_brake, _x.cmd_steerAng, _x.feedback_brake_press, _x.feedback_gas, _x.feedback_torque, _x.feedback_Motor_rotv, _x.feedback_steerAng, _x.feedback_tireAng, _x.gas_pedal_press, _x.brake_pedal_press))
      _x = self.gear
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.orientation.tostring())
      buff.write(self.linear_velocity.tostring())
      buff.write(self.vehicleAcceleration.tostring())
      buff.write(self.wheelspeed.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.light_state.header.seq, _x.light_state.header.stamp.secs, _x.light_state.header.stamp.nsecs))
      _x = self.light_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2idi().pack(_x.light_state.turn_light, _x.light_state.car_light, _x.vehiclespeed, _x.vcu_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.light_state is None:
        self.light_state = smartcar_msgs.msg.VehicleLightState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.cmd_torque, _x.cmd_decelaration, _x.cmd_gas, _x.cmd_brake, _x.cmd_steerAng, _x.feedback_brake_press, _x.feedback_gas, _x.feedback_torque, _x.feedback_Motor_rotv, _x.feedback_steerAng, _x.feedback_tireAng, _x.gas_pedal_press, _x.brake_pedal_press,) = _get_struct_11d2B().unpack(str[start:end])
      self.gas_pedal_press = bool(self.gas_pedal_press)
      self.brake_pedal_press = bool(self.brake_pedal_press)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gear = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gear = str[start:end]
      start = end
      end += 24
      self.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.linear_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.vehicleAcceleration = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.wheelspeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 12
      (_x.light_state.header.seq, _x.light_state.header.stamp.secs, _x.light_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.light_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.light_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.light_state.turn_light, _x.light_state.car_light, _x.vehiclespeed, _x.vcu_mode,) = _get_struct_2idi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d2B = None
def _get_struct_11d2B():
    global _struct_11d2B
    if _struct_11d2B is None:
        _struct_11d2B = struct.Struct("<11d2B")
    return _struct_11d2B
_struct_2idi = None
def _get_struct_2idi():
    global _struct_2idi
    if _struct_2idi is None:
        _struct_2idi = struct.Struct("<2idi")
    return _struct_2idi
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
