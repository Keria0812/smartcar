# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/LongitudinalData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LongitudinalData(genpy.Message):
  _md5sum = "5e1bfb472e4917d66e73052e666a6e34"
  _type = "smartcar_msgs/LongitudinalData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 vel_from_localization
float64 vel_from_wheels
float64 acceleration
float64 traveled_distance
float64 fl_wheel_angular_velocity
float64 fr_wheel_angular_velocity
float64 bl_wheel_angular_velocity
float64 br_wheel_angular_velocity
float64 gas_percent
float64 fl_gas_torque
float64 fr_gas_torque
float64 bl_gas_torque
float64 br_gas_torque
float64 fl_brake_Torque
float64 fr_brake_torque
float64 bl_brake_torque
float64 br_brake_torque
"""
  __slots__ = ['vel_from_localization','vel_from_wheels','acceleration','traveled_distance','fl_wheel_angular_velocity','fr_wheel_angular_velocity','bl_wheel_angular_velocity','br_wheel_angular_velocity','gas_percent','fl_gas_torque','fr_gas_torque','bl_gas_torque','br_gas_torque','fl_brake_Torque','fr_brake_torque','bl_brake_torque','br_brake_torque']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vel_from_localization,vel_from_wheels,acceleration,traveled_distance,fl_wheel_angular_velocity,fr_wheel_angular_velocity,bl_wheel_angular_velocity,br_wheel_angular_velocity,gas_percent,fl_gas_torque,fr_gas_torque,bl_gas_torque,br_gas_torque,fl_brake_Torque,fr_brake_torque,bl_brake_torque,br_brake_torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LongitudinalData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vel_from_localization is None:
        self.vel_from_localization = 0.
      if self.vel_from_wheels is None:
        self.vel_from_wheels = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.traveled_distance is None:
        self.traveled_distance = 0.
      if self.fl_wheel_angular_velocity is None:
        self.fl_wheel_angular_velocity = 0.
      if self.fr_wheel_angular_velocity is None:
        self.fr_wheel_angular_velocity = 0.
      if self.bl_wheel_angular_velocity is None:
        self.bl_wheel_angular_velocity = 0.
      if self.br_wheel_angular_velocity is None:
        self.br_wheel_angular_velocity = 0.
      if self.gas_percent is None:
        self.gas_percent = 0.
      if self.fl_gas_torque is None:
        self.fl_gas_torque = 0.
      if self.fr_gas_torque is None:
        self.fr_gas_torque = 0.
      if self.bl_gas_torque is None:
        self.bl_gas_torque = 0.
      if self.br_gas_torque is None:
        self.br_gas_torque = 0.
      if self.fl_brake_Torque is None:
        self.fl_brake_Torque = 0.
      if self.fr_brake_torque is None:
        self.fr_brake_torque = 0.
      if self.bl_brake_torque is None:
        self.bl_brake_torque = 0.
      if self.br_brake_torque is None:
        self.br_brake_torque = 0.
    else:
      self.vel_from_localization = 0.
      self.vel_from_wheels = 0.
      self.acceleration = 0.
      self.traveled_distance = 0.
      self.fl_wheel_angular_velocity = 0.
      self.fr_wheel_angular_velocity = 0.
      self.bl_wheel_angular_velocity = 0.
      self.br_wheel_angular_velocity = 0.
      self.gas_percent = 0.
      self.fl_gas_torque = 0.
      self.fr_gas_torque = 0.
      self.bl_gas_torque = 0.
      self.br_gas_torque = 0.
      self.fl_brake_Torque = 0.
      self.fr_brake_torque = 0.
      self.bl_brake_torque = 0.
      self.br_brake_torque = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17d().pack(_x.vel_from_localization, _x.vel_from_wheels, _x.acceleration, _x.traveled_distance, _x.fl_wheel_angular_velocity, _x.fr_wheel_angular_velocity, _x.bl_wheel_angular_velocity, _x.br_wheel_angular_velocity, _x.gas_percent, _x.fl_gas_torque, _x.fr_gas_torque, _x.bl_gas_torque, _x.br_gas_torque, _x.fl_brake_Torque, _x.fr_brake_torque, _x.bl_brake_torque, _x.br_brake_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 136
      (_x.vel_from_localization, _x.vel_from_wheels, _x.acceleration, _x.traveled_distance, _x.fl_wheel_angular_velocity, _x.fr_wheel_angular_velocity, _x.bl_wheel_angular_velocity, _x.br_wheel_angular_velocity, _x.gas_percent, _x.fl_gas_torque, _x.fr_gas_torque, _x.bl_gas_torque, _x.br_gas_torque, _x.fl_brake_Torque, _x.fr_brake_torque, _x.bl_brake_torque, _x.br_brake_torque,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17d().pack(_x.vel_from_localization, _x.vel_from_wheels, _x.acceleration, _x.traveled_distance, _x.fl_wheel_angular_velocity, _x.fr_wheel_angular_velocity, _x.bl_wheel_angular_velocity, _x.br_wheel_angular_velocity, _x.gas_percent, _x.fl_gas_torque, _x.fr_gas_torque, _x.bl_gas_torque, _x.br_gas_torque, _x.fl_brake_Torque, _x.fr_brake_torque, _x.bl_brake_torque, _x.br_brake_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 136
      (_x.vel_from_localization, _x.vel_from_wheels, _x.acceleration, _x.traveled_distance, _x.fl_wheel_angular_velocity, _x.fr_wheel_angular_velocity, _x.bl_wheel_angular_velocity, _x.br_wheel_angular_velocity, _x.gas_percent, _x.fl_gas_torque, _x.fr_gas_torque, _x.bl_gas_torque, _x.br_gas_torque, _x.fl_brake_Torque, _x.fr_brake_torque, _x.bl_brake_torque, _x.br_brake_torque,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d = None
def _get_struct_17d():
    global _struct_17d
    if _struct_17d is None:
        _struct_17d = struct.Struct("<17d")
    return _struct_17d
