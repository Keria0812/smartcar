# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/DetectedObjectArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import smartcar_msgs.msg
import std_msgs.msg

class DetectedObjectArray(genpy.Message):
  _md5sum = "c68050d331471548543425b21258f71a"
  _type = "smartcar_msgs/DetectedObjectArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
DetectedObject[] objects
uint32 num
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: smartcar_msgs/DetectedObject
std_msgs/Header                 header

string                           id      #便于后续预测轨迹赋值每个点的id, 最后的id为perception_id+trajectory_index，即id=2_12，代表id为2的障碍物的第12个轨迹点。
string                          label
float32                         score   #Score as defined by the detection, Optional
std_msgs/ColorRGBA              color   # Define this object specific color
bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering

################ 3D BB
string                          space_frame #3D Space coordinate frame of the object, required if pose and dimensions are defines
float64                         x  #car frame x-forward y-left, z-up
float64                         y
float64                         z
float64                         heading
float32                         length
float32                         width
float32                         height
float32                         speed
geometry_msgs/Point             foot_lf #车辆坐标系下，左前
geometry_msgs/Point             foot_lr #左后
geometry_msgs/Point             foot_rf #右前
geometry_msgs/Point             foot_rr #右后


float64                         utm_x  #utm frame x-forward y-left, z-up
float64                         utm_y
float64                         utm_z
float64                         utm_heading
geometry_msgs/Point             utm_foot_lf
geometry_msgs/Point             utm_foot_lr
geometry_msgs/Point             utm_foot_rf
geometry_msgs/Point             utm_foot_rr
geometry_msgs/Twist             utm_twist


bool                            pose_reliable
bool                            velocity_reliable
bool                            acceleration_reliable

############### Indicator information
uint8                          indicator_state # INDICATOR_LEFT = 0, INDICATOR_RIGHT = 1, INDICATOR_BOTH = 2, INDICATOR_NONE = 3

############### Behavior State of the Detected Object
uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6

#
string[]                        user_defined_info
bool is_static

My_Trajectory trajectory_  #预测轨迹
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: smartcar_msgs/My_Trajectory
Header header
int32 lane_id
bool ESTOP
My_Trajectory_Point[] trajectory_points
int32 num

================================================================================
MSG: smartcar_msgs/My_Trajectory_Point
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 l
float64 dkappa
float64 ddkappa
float64 v
float64 a
float64 relative_time
float64 gear
"""
  __slots__ = ['header','objects','num']
  _slot_types = ['std_msgs/Header','smartcar_msgs/DetectedObject[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects,num

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObjectArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
      if self.num is None:
        self.num = 0
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []
      self.num = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.score
        buff.write(_get_struct_f().pack(_x))
        _v3 = val1.color
        _x = _v3
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1.valid
        buff.write(_get_struct_B().pack(_x))
        _x = val1.space_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d4f().pack(_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed))
        _v4 = val1.foot_lf
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.foot_lr
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.foot_rf
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.foot_rr
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading))
        _v8 = val1.utm_foot_lf
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.utm_foot_lr
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.utm_foot_rf
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.utm_foot_rr
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.utm_twist
        _v13 = _v12.linear
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.angular
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5B().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state))
        length = len(val1.user_defined_info)
        buff.write(_struct_I.pack(length))
        for val2 in val1.user_defined_info:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.is_static
        buff.write(_get_struct_B().pack(_x))
        _v15 = val1.trajectory_
        _v16 = _v15.header
        _x = _v16.seq
        buff.write(_get_struct_I().pack(_x))
        _v17 = _v16.stamp
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v16.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v15
        buff.write(_get_struct_iB().pack(_x.lane_id, _x.ESTOP))
        length = len(_v15.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.trajectory_points:
          _x = val3
          buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
        _x = _v15.num
        buff.write(_get_struct_i().pack(_x))
      _x = self.num
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = smartcar_msgs.msg.DetectedObject()
        _v18 = val1.header
        start = end
        end += 4
        (_v18.seq,) = _get_struct_I().unpack(str[start:end])
        _v19 = _v18.stamp
        _x = _v19
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v18.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (val1.score,) = _get_struct_f().unpack(str[start:end])
        _v20 = val1.color
        _x = _v20
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid,) = _get_struct_B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.space_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.space_frame = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed,) = _get_struct_4d4f().unpack(str[start:end])
        _v21 = val1.foot_lf
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v22 = val1.foot_lr
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v23 = val1.foot_rf
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.foot_rr
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading,) = _get_struct_4d().unpack(str[start:end])
        _v25 = val1.utm_foot_lf
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = val1.utm_foot_lr
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = val1.utm_foot_rf
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v28 = val1.utm_foot_rr
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v29 = val1.utm_twist
        _v30 = _v29.linear
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v31 = _v29.angular
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state,) = _get_struct_5B().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        val1.velocity_reliable = bool(val1.velocity_reliable)
        val1.acceleration_reliable = bool(val1.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.user_defined_info = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.user_defined_info.append(val2)
        start = end
        end += 1
        (val1.is_static,) = _get_struct_B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v32 = val1.trajectory_
        _v33 = _v32.header
        start = end
        end += 4
        (_v33.seq,) = _get_struct_I().unpack(str[start:end])
        _v34 = _v33.stamp
        _x = _v34
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v33.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v33.frame_id = str[start:end]
        _x = _v32
        start = end
        end += 5
        (_x.lane_id, _x.ESTOP,) = _get_struct_iB().unpack(str[start:end])
        _v32.ESTOP = bool(_v32.ESTOP)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v32.trajectory_points = []
        for i in range(0, length):
          val3 = smartcar_msgs.msg.My_Trajectory_Point()
          _x = val3
          start = end
          end += 104
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
          _v32.trajectory_points.append(val3)
        start = end
        end += 4
        (_v32.num,) = _get_struct_i().unpack(str[start:end])
        self.objects.append(val1)
      start = end
      end += 4
      (self.num,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v35 = val1.header
        _x = _v35.seq
        buff.write(_get_struct_I().pack(_x))
        _v36 = _v35.stamp
        _x = _v36
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v35.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.score
        buff.write(_get_struct_f().pack(_x))
        _v37 = val1.color
        _x = _v37
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1.valid
        buff.write(_get_struct_B().pack(_x))
        _x = val1.space_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d4f().pack(_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed))
        _v38 = val1.foot_lf
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v39 = val1.foot_lr
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v40 = val1.foot_rf
        _x = _v40
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v41 = val1.foot_rr
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading))
        _v42 = val1.utm_foot_lf
        _x = _v42
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v43 = val1.utm_foot_lr
        _x = _v43
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v44 = val1.utm_foot_rf
        _x = _v44
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v45 = val1.utm_foot_rr
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v46 = val1.utm_twist
        _v47 = _v46.linear
        _x = _v47
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v48 = _v46.angular
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5B().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state))
        length = len(val1.user_defined_info)
        buff.write(_struct_I.pack(length))
        for val2 in val1.user_defined_info:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.is_static
        buff.write(_get_struct_B().pack(_x))
        _v49 = val1.trajectory_
        _v50 = _v49.header
        _x = _v50.seq
        buff.write(_get_struct_I().pack(_x))
        _v51 = _v50.stamp
        _x = _v51
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v50.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v49
        buff.write(_get_struct_iB().pack(_x.lane_id, _x.ESTOP))
        length = len(_v49.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.trajectory_points:
          _x = val3
          buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
        _x = _v49.num
        buff.write(_get_struct_i().pack(_x))
      _x = self.num
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = smartcar_msgs.msg.DetectedObject()
        _v52 = val1.header
        start = end
        end += 4
        (_v52.seq,) = _get_struct_I().unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (val1.score,) = _get_struct_f().unpack(str[start:end])
        _v54 = val1.color
        _x = _v54
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid,) = _get_struct_B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.space_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.space_frame = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.x, _x.y, _x.z, _x.heading, _x.length, _x.width, _x.height, _x.speed,) = _get_struct_4d4f().unpack(str[start:end])
        _v55 = val1.foot_lf
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = val1.foot_lr
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v57 = val1.foot_rf
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v58 = val1.foot_rr
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.utm_x, _x.utm_y, _x.utm_z, _x.utm_heading,) = _get_struct_4d().unpack(str[start:end])
        _v59 = val1.utm_foot_lf
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v60 = val1.utm_foot_lr
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v61 = val1.utm_foot_rf
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v62 = val1.utm_foot_rr
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v63 = val1.utm_twist
        _v64 = _v63.linear
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v65 = _v63.angular
        _x = _v65
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.indicator_state, _x.behavior_state,) = _get_struct_5B().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        val1.velocity_reliable = bool(val1.velocity_reliable)
        val1.acceleration_reliable = bool(val1.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.user_defined_info = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.user_defined_info.append(val2)
        start = end
        end += 1
        (val1.is_static,) = _get_struct_B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v66 = val1.trajectory_
        _v67 = _v66.header
        start = end
        end += 4
        (_v67.seq,) = _get_struct_I().unpack(str[start:end])
        _v68 = _v67.stamp
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v67.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v67.frame_id = str[start:end]
        _x = _v66
        start = end
        end += 5
        (_x.lane_id, _x.ESTOP,) = _get_struct_iB().unpack(str[start:end])
        _v66.ESTOP = bool(_v66.ESTOP)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v66.trajectory_points = []
        for i in range(0, length):
          val3 = smartcar_msgs.msg.My_Trajectory_Point()
          _x = val3
          start = end
          end += 104
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
          _v66.trajectory_points.append(val3)
        start = end
        end += 4
        (_v66.num,) = _get_struct_i().unpack(str[start:end])
        self.objects.append(val1)
      start = end
      end += 4
      (self.num,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4d4f = None
def _get_struct_4d4f():
    global _struct_4d4f
    if _struct_4d4f is None:
        _struct_4d4f = struct.Struct("<4d4f")
    return _struct_4d4f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
