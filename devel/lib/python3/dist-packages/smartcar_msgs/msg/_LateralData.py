# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/LateralData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LateralData(genpy.Message):
  _md5sum = "cfef9feeb4812e9c07678250076f59e3"
  _type = "smartcar_msgs/LateralData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 heading_angle
float64 steering_wheel_angle_actual
float64 steering_wheel_expected
float64 steering_wheel_error
float64 steering_wheel_cmd

float64 fl_steering_angle_actual
float64 fr_steering_angle_actual
float64 single_track_steering_angle
float64 fl_steering_angle_expected
float64 fr_steering_angle_expected
float64 fl_steering_error
float64 fr_steering_error
float64 fl_steering_cmd
float64 fr_steering_cmd

"""
  __slots__ = ['heading_angle','steering_wheel_angle_actual','steering_wheel_expected','steering_wheel_error','steering_wheel_cmd','fl_steering_angle_actual','fr_steering_angle_actual','single_track_steering_angle','fl_steering_angle_expected','fr_steering_angle_expected','fl_steering_error','fr_steering_error','fl_steering_cmd','fr_steering_cmd']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heading_angle,steering_wheel_angle_actual,steering_wheel_expected,steering_wheel_error,steering_wheel_cmd,fl_steering_angle_actual,fr_steering_angle_actual,single_track_steering_angle,fl_steering_angle_expected,fr_steering_angle_expected,fl_steering_error,fr_steering_error,fl_steering_cmd,fr_steering_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LateralData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.heading_angle is None:
        self.heading_angle = 0.
      if self.steering_wheel_angle_actual is None:
        self.steering_wheel_angle_actual = 0.
      if self.steering_wheel_expected is None:
        self.steering_wheel_expected = 0.
      if self.steering_wheel_error is None:
        self.steering_wheel_error = 0.
      if self.steering_wheel_cmd is None:
        self.steering_wheel_cmd = 0.
      if self.fl_steering_angle_actual is None:
        self.fl_steering_angle_actual = 0.
      if self.fr_steering_angle_actual is None:
        self.fr_steering_angle_actual = 0.
      if self.single_track_steering_angle is None:
        self.single_track_steering_angle = 0.
      if self.fl_steering_angle_expected is None:
        self.fl_steering_angle_expected = 0.
      if self.fr_steering_angle_expected is None:
        self.fr_steering_angle_expected = 0.
      if self.fl_steering_error is None:
        self.fl_steering_error = 0.
      if self.fr_steering_error is None:
        self.fr_steering_error = 0.
      if self.fl_steering_cmd is None:
        self.fl_steering_cmd = 0.
      if self.fr_steering_cmd is None:
        self.fr_steering_cmd = 0.
    else:
      self.heading_angle = 0.
      self.steering_wheel_angle_actual = 0.
      self.steering_wheel_expected = 0.
      self.steering_wheel_error = 0.
      self.steering_wheel_cmd = 0.
      self.fl_steering_angle_actual = 0.
      self.fr_steering_angle_actual = 0.
      self.single_track_steering_angle = 0.
      self.fl_steering_angle_expected = 0.
      self.fr_steering_angle_expected = 0.
      self.fl_steering_error = 0.
      self.fr_steering_error = 0.
      self.fl_steering_cmd = 0.
      self.fr_steering_cmd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.heading_angle, _x.steering_wheel_angle_actual, _x.steering_wheel_expected, _x.steering_wheel_error, _x.steering_wheel_cmd, _x.fl_steering_angle_actual, _x.fr_steering_angle_actual, _x.single_track_steering_angle, _x.fl_steering_angle_expected, _x.fr_steering_angle_expected, _x.fl_steering_error, _x.fr_steering_error, _x.fl_steering_cmd, _x.fr_steering_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.heading_angle, _x.steering_wheel_angle_actual, _x.steering_wheel_expected, _x.steering_wheel_error, _x.steering_wheel_cmd, _x.fl_steering_angle_actual, _x.fr_steering_angle_actual, _x.single_track_steering_angle, _x.fl_steering_angle_expected, _x.fr_steering_angle_expected, _x.fl_steering_error, _x.fr_steering_error, _x.fl_steering_cmd, _x.fr_steering_cmd,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.heading_angle, _x.steering_wheel_angle_actual, _x.steering_wheel_expected, _x.steering_wheel_error, _x.steering_wheel_cmd, _x.fl_steering_angle_actual, _x.fr_steering_angle_actual, _x.single_track_steering_angle, _x.fl_steering_angle_expected, _x.fr_steering_angle_expected, _x.fl_steering_error, _x.fr_steering_error, _x.fl_steering_cmd, _x.fr_steering_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.heading_angle, _x.steering_wheel_angle_actual, _x.steering_wheel_expected, _x.steering_wheel_error, _x.steering_wheel_cmd, _x.fl_steering_angle_actual, _x.fr_steering_angle_actual, _x.single_track_steering_angle, _x.fl_steering_angle_expected, _x.fr_steering_angle_expected, _x.fl_steering_error, _x.fr_steering_error, _x.fl_steering_cmd, _x.fr_steering_cmd,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
