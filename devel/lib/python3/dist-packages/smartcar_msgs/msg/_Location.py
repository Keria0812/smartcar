# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/Location.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Location(genpy.Message):
  _md5sum = "00db5d5e3e65b48b95b9219165f53168"
  _type = "smartcar_msgs/Location"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header	   header # ROS time(s)

int32[2]   ins_time # GPS weeks, GPS million seconds
geometry_msgs/Point global_pos # x,y, east-north-sky frame(m)
float64[3] wgs84_pos # lon,lat,alt, WGS84(rad,rad,m)
float32[3] global_speed # east_speed,north_speed,up_speed,east-north-sky frame(m/s)
float32[3] accelerate # /* m/s^2, utm坐标系 */
float32[3] orientation # roll,pitch,yaw, Vehicle/Guass frame(rad,rad,rad)
float32[3] rpy_rate # roll_rate, pitch_rate, yaw_rate, Vehicle frame(rad/s)
float64    speed # 总的速度
float64    v_x # base_link坐标系
float64    v_y
float64    v_z
float64 accel_x # base_link坐标系
float64 accel_y 
float64 accel_z 

float32[4] ins_std_error # std_lat, std_lon, std_height, std_heading
int32[3]   ins_data_info # ins_num_satellite, gps_delay , wheel_speed
string     INS_status # 0_NONE_,  16_SINGLE_, 17_PSRDIFF_ , 34_NARROW_FLOAT_, 50_NARROW_INT_

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','ins_time','global_pos','wgs84_pos','global_speed','accelerate','orientation','rpy_rate','speed','v_x','v_y','v_z','accel_x','accel_y','accel_z','ins_std_error','ins_data_info','INS_status']
  _slot_types = ['std_msgs/Header','int32[2]','geometry_msgs/Point','float64[3]','float32[3]','float32[3]','float32[3]','float32[3]','float64','float64','float64','float64','float64','float64','float64','float32[4]','int32[3]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ins_time,global_pos,wgs84_pos,global_speed,accelerate,orientation,rpy_rate,speed,v_x,v_y,v_z,accel_x,accel_y,accel_z,ins_std_error,ins_data_info,INS_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Location, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ins_time is None:
        self.ins_time = [0] * 2
      if self.global_pos is None:
        self.global_pos = geometry_msgs.msg.Point()
      if self.wgs84_pos is None:
        self.wgs84_pos = [0.] * 3
      if self.global_speed is None:
        self.global_speed = [0.] * 3
      if self.accelerate is None:
        self.accelerate = [0.] * 3
      if self.orientation is None:
        self.orientation = [0.] * 3
      if self.rpy_rate is None:
        self.rpy_rate = [0.] * 3
      if self.speed is None:
        self.speed = 0.
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
      if self.v_z is None:
        self.v_z = 0.
      if self.accel_x is None:
        self.accel_x = 0.
      if self.accel_y is None:
        self.accel_y = 0.
      if self.accel_z is None:
        self.accel_z = 0.
      if self.ins_std_error is None:
        self.ins_std_error = [0.] * 4
      if self.ins_data_info is None:
        self.ins_data_info = [0] * 3
      if self.INS_status is None:
        self.INS_status = ''
    else:
      self.header = std_msgs.msg.Header()
      self.ins_time = [0] * 2
      self.global_pos = geometry_msgs.msg.Point()
      self.wgs84_pos = [0.] * 3
      self.global_speed = [0.] * 3
      self.accelerate = [0.] * 3
      self.orientation = [0.] * 3
      self.rpy_rate = [0.] * 3
      self.speed = 0.
      self.v_x = 0.
      self.v_y = 0.
      self.v_z = 0.
      self.accel_x = 0.
      self.accel_y = 0.
      self.accel_z = 0.
      self.ins_std_error = [0.] * 4
      self.ins_data_info = [0] * 3
      self.INS_status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_2i().pack(*self.ins_time))
      _x = self
      buff.write(_get_struct_3d().pack(_x.global_pos.x, _x.global_pos.y, _x.global_pos.z))
      buff.write(_get_struct_3d().pack(*self.wgs84_pos))
      buff.write(_get_struct_3f().pack(*self.global_speed))
      buff.write(_get_struct_3f().pack(*self.accelerate))
      buff.write(_get_struct_3f().pack(*self.orientation))
      buff.write(_get_struct_3f().pack(*self.rpy_rate))
      _x = self
      buff.write(_get_struct_7d().pack(_x.speed, _x.v_x, _x.v_y, _x.v_z, _x.accel_x, _x.accel_y, _x.accel_z))
      buff.write(_get_struct_4f().pack(*self.ins_std_error))
      buff.write(_get_struct_3i().pack(*self.ins_data_info))
      _x = self.INS_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.global_pos is None:
        self.global_pos = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      self.ins_time = _get_struct_2i().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.global_pos.x, _x.global_pos.y, _x.global_pos.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.wgs84_pos = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 12
      self.global_speed = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.accelerate = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.orientation = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.rpy_rate = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.speed, _x.v_x, _x.v_y, _x.v_z, _x.accel_x, _x.accel_y, _x.accel_z,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 16
      self.ins_std_error = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.ins_data_info = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.INS_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.INS_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.ins_time.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.global_pos.x, _x.global_pos.y, _x.global_pos.z))
      buff.write(self.wgs84_pos.tostring())
      buff.write(self.global_speed.tostring())
      buff.write(self.accelerate.tostring())
      buff.write(self.orientation.tostring())
      buff.write(self.rpy_rate.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.speed, _x.v_x, _x.v_y, _x.v_z, _x.accel_x, _x.accel_y, _x.accel_z))
      buff.write(self.ins_std_error.tostring())
      buff.write(self.ins_data_info.tostring())
      _x = self.INS_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.global_pos is None:
        self.global_pos = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      self.ins_time = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      _x = self
      start = end
      end += 24
      (_x.global_pos.x, _x.global_pos.y, _x.global_pos.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.wgs84_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 12
      self.global_speed = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.accelerate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.rpy_rate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 56
      (_x.speed, _x.v_x, _x.v_y, _x.v_z, _x.accel_x, _x.accel_y, _x.accel_z,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 16
      self.ins_std_error = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.ins_data_info = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.INS_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.INS_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
