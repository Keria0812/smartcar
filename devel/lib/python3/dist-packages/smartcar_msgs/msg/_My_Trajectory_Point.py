# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smartcar_msgs/My_Trajectory_Point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class My_Trajectory_Point(genpy.Message):
  _md5sum = "9b99836b373278ef538727f7eb83a3fe"
  _type = "smartcar_msgs/My_Trajectory_Point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 l
float64 dkappa
float64 ddkappa
float64 v
float64 a
float64 relative_time
float64 gear
"""
  __slots__ = ['x','y','z','theta','kappa','s','l','dkappa','ddkappa','v','a','relative_time','gear']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,theta,kappa,s,l,dkappa,ddkappa,v,a,relative_time,gear

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(My_Trajectory_Point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.theta is None:
        self.theta = 0.
      if self.kappa is None:
        self.kappa = 0.
      if self.s is None:
        self.s = 0.
      if self.l is None:
        self.l = 0.
      if self.dkappa is None:
        self.dkappa = 0.
      if self.ddkappa is None:
        self.ddkappa = 0.
      if self.v is None:
        self.v = 0.
      if self.a is None:
        self.a = 0.
      if self.relative_time is None:
        self.relative_time = 0.
      if self.gear is None:
        self.gear = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.theta = 0.
      self.kappa = 0.
      self.s = 0.
      self.l = 0.
      self.dkappa = 0.
      self.ddkappa = 0.
      self.v = 0.
      self.a = 0.
      self.relative_time = 0.
      self.gear = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.l, _x.dkappa, _x.ddkappa, _x.v, _x.a, _x.relative_time, _x.gear,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
