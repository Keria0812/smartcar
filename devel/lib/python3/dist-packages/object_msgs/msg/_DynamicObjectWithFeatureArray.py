# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_msgs/DynamicObjectWithFeatureArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import object_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class DynamicObjectWithFeatureArray(genpy.Message):
  _md5sum = "15a96f3c3ffea7036965bc7d1c5a2b0b"
  _type = "object_msgs/DynamicObjectWithFeatureArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
DynamicObjectWithFeature[] feature_objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: object_msgs/DynamicObjectWithFeature
DynamicObject object
Feature feature
================================================================================
MSG: object_msgs/DynamicObject
#uuid_msgs/UniqueID id
string id
Semantic semantic
State state
Shape shape
PredictedPath path
================================================================================
MSG: object_msgs/Semantic
uint8 UNKNOWN=0
uint8 CAR=1
uint8 TRUCK=2
uint8 BUS=3
uint8 BICYCLE=4
uint8 MOTORBIKE=5
uint8 PEDESTRIAN=6
uint8 ANIMAL=7
uint32 type
float64 confidence
================================================================================
MSG: object_msgs/State
geometry_msgs/PoseWithCovariance pose_covariance
bool orientation_reliable
geometry_msgs/TwistWithCovariance twist_covariance
bool twist_reliable
geometry_msgs/AccelWithCovariance acceleration_covariance
bool acceleration_reliable
PredictedPath[] predicted_paths

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: object_msgs/PredictedPath
geometry_msgs/PoseWithCovarianceStamped[] path
float64 confidence

================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose

================================================================================
MSG: object_msgs/Shape
uint8 BOUNDING_BOX=0
uint8 CYLINDER=1
uint8 POLYGON=2

uint8 type
geometry_msgs/Vector3 dimensions
geometry_msgs/Polygon footprint 

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: object_msgs/Feature
sensor_msgs/PointCloud2 cluster
sensor_msgs/RegionOfInterest roi
================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify
"""
  __slots__ = ['header','feature_objects']
  _slot_types = ['std_msgs/Header','object_msgs/DynamicObjectWithFeature[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,feature_objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicObjectWithFeatureArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.feature_objects is None:
        self.feature_objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.feature_objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.feature_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_objects:
        _v1 = val1.object
        _x = _v1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = _v1.semantic
        _x = _v2
        buff.write(_get_struct_Id().pack(_x.type, _x.confidence))
        _v3 = _v1.state
        _v4 = _v3.pose_covariance
        _v5 = _v4.pose
        _v6 = _v5.position
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = _v5.orientation
        _x = _v7
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v4.covariance))
        _x = _v3.orientation_reliable
        buff.write(_get_struct_B().pack(_x))
        _v8 = _v3.twist_covariance
        _v9 = _v8.twist
        _v10 = _v9.linear
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.angular
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v8.covariance))
        _x = _v3.twist_reliable
        buff.write(_get_struct_B().pack(_x))
        _v12 = _v3.acceleration_covariance
        _v13 = _v12.accel
        _v14 = _v13.linear
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.angular
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v12.covariance))
        _x = _v3.acceleration_reliable
        buff.write(_get_struct_B().pack(_x))
        length = len(_v3.predicted_paths)
        buff.write(_struct_I.pack(length))
        for val4 in _v3.predicted_paths:
          length = len(val4.path)
          buff.write(_struct_I.pack(length))
          for val5 in val4.path:
            _v16 = val5.header
            _x = _v16.seq
            buff.write(_get_struct_I().pack(_x))
            _v17 = _v16.stamp
            _x = _v17
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v16.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v18 = val5.pose
            _v19 = _v18.pose
            _v20 = _v19.position
            _x = _v20
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v21 = _v19.orientation
            _x = _v21
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_get_struct_36d().pack(*_v18.covariance))
          _x = val4.confidence
          buff.write(_get_struct_d().pack(_x))
        _v22 = _v1.shape
        _x = _v22.type
        buff.write(_get_struct_B().pack(_x))
        _v23 = _v22.dimensions
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = _v22.footprint
        length = len(_v24.points)
        buff.write(_struct_I.pack(length))
        for val5 in _v24.points:
          _x = val5
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v25 = _v1.path
        length = len(_v25.path)
        buff.write(_struct_I.pack(length))
        for val4 in _v25.path:
          _v26 = val4.header
          _x = _v26.seq
          buff.write(_get_struct_I().pack(_x))
          _v27 = _v26.stamp
          _x = _v27
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v26.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v28 = val4.pose
          _v29 = _v28.pose
          _v30 = _v29.position
          _x = _v30
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v31 = _v29.orientation
          _x = _v31
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_36d().pack(*_v28.covariance))
        _x = _v25.confidence
        buff.write(_get_struct_d().pack(_x))
        _v32 = val1.feature
        _v33 = _v32.cluster
        _v34 = _v33.header
        _x = _v34.seq
        buff.write(_get_struct_I().pack(_x))
        _v35 = _v34.stamp
        _x = _v35
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v34.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v33
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v33.fields)
        buff.write(_struct_I.pack(length))
        for val4 in _v33.fields:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v33
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v33.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v33.is_dense
        buff.write(_get_struct_B().pack(_x))
        _v36 = _v32.roi
        _x = _v36
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.feature_objects is None:
        self.feature_objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_objects = []
      for i in range(0, length):
        val1 = object_msgs.msg.DynamicObjectWithFeature()
        _v37 = val1.object
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v37.id = str[start:end]
        _v38 = _v37.semantic
        _x = _v38
        start = end
        end += 12
        (_x.type, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        _v39 = _v37.state
        _v40 = _v39.pose_covariance
        _v41 = _v40.pose
        _v42 = _v41.position
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v43 = _v41.orientation
        _x = _v43
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v40.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v39.orientation_reliable,) = _get_struct_B().unpack(str[start:end])
        _v39.orientation_reliable = bool(_v39.orientation_reliable)
        _v44 = _v39.twist_covariance
        _v45 = _v44.twist
        _v46 = _v45.linear
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v47 = _v45.angular
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v44.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v39.twist_reliable,) = _get_struct_B().unpack(str[start:end])
        _v39.twist_reliable = bool(_v39.twist_reliable)
        _v48 = _v39.acceleration_covariance
        _v49 = _v48.accel
        _v50 = _v49.linear
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v51 = _v49.angular
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v48.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v39.acceleration_reliable,) = _get_struct_B().unpack(str[start:end])
        _v39.acceleration_reliable = bool(_v39.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v39.predicted_paths = []
        for i in range(0, length):
          val4 = object_msgs.msg.PredictedPath()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.path = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.PoseWithCovarianceStamped()
            _v52 = val5.header
            start = end
            end += 4
            (_v52.seq,) = _get_struct_I().unpack(str[start:end])
            _v53 = _v52.stamp
            _x = _v53
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v52.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v52.frame_id = str[start:end]
            _v54 = val5.pose
            _v55 = _v54.pose
            _v56 = _v55.position
            _x = _v56
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v57 = _v55.orientation
            _x = _v57
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v54.covariance = _get_struct_36d().unpack(str[start:end])
            val4.path.append(val5)
          start = end
          end += 8
          (val4.confidence,) = _get_struct_d().unpack(str[start:end])
          _v39.predicted_paths.append(val4)
        _v58 = _v37.shape
        start = end
        end += 1
        (_v58.type,) = _get_struct_B().unpack(str[start:end])
        _v59 = _v58.dimensions
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v60 = _v58.footprint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.points = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Point32()
          _x = val5
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v60.points.append(val5)
        _v61 = _v37.path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v61.path = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.PoseWithCovarianceStamped()
          _v62 = val4.header
          start = end
          end += 4
          (_v62.seq,) = _get_struct_I().unpack(str[start:end])
          _v63 = _v62.stamp
          _x = _v63
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v62.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v62.frame_id = str[start:end]
          _v64 = val4.pose
          _v65 = _v64.pose
          _v66 = _v65.position
          _x = _v66
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v67 = _v65.orientation
          _x = _v67
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v64.covariance = _get_struct_36d().unpack(str[start:end])
          _v61.path.append(val4)
        start = end
        end += 8
        (_v61.confidence,) = _get_struct_d().unpack(str[start:end])
        _v68 = val1.feature
        _v69 = _v68.cluster
        _v70 = _v69.header
        start = end
        end += 4
        (_v70.seq,) = _get_struct_I().unpack(str[start:end])
        _v71 = _v70.stamp
        _x = _v71
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v70.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v70.frame_id = str[start:end]
        _x = _v69
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v69.fields = []
        for i in range(0, length):
          val4 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          _x = val4
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v69.fields.append(val4)
        _x = _v69
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v69.is_bigendian = bool(_v69.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v69.data = str[start:end]
        start = end
        end += 1
        (_v69.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v69.is_dense = bool(_v69.is_dense)
        _v72 = _v68.roi
        _x = _v72
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v72.do_rectify = bool(_v72.do_rectify)
        self.feature_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.feature_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_objects:
        _v73 = val1.object
        _x = _v73.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v74 = _v73.semantic
        _x = _v74
        buff.write(_get_struct_Id().pack(_x.type, _x.confidence))
        _v75 = _v73.state
        _v76 = _v75.pose_covariance
        _v77 = _v76.pose
        _v78 = _v77.position
        _x = _v78
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v79 = _v77.orientation
        _x = _v79
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v76.covariance.tostring())
        _x = _v75.orientation_reliable
        buff.write(_get_struct_B().pack(_x))
        _v80 = _v75.twist_covariance
        _v81 = _v80.twist
        _v82 = _v81.linear
        _x = _v82
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v83 = _v81.angular
        _x = _v83
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v80.covariance.tostring())
        _x = _v75.twist_reliable
        buff.write(_get_struct_B().pack(_x))
        _v84 = _v75.acceleration_covariance
        _v85 = _v84.accel
        _v86 = _v85.linear
        _x = _v86
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v87 = _v85.angular
        _x = _v87
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v84.covariance.tostring())
        _x = _v75.acceleration_reliable
        buff.write(_get_struct_B().pack(_x))
        length = len(_v75.predicted_paths)
        buff.write(_struct_I.pack(length))
        for val4 in _v75.predicted_paths:
          length = len(val4.path)
          buff.write(_struct_I.pack(length))
          for val5 in val4.path:
            _v88 = val5.header
            _x = _v88.seq
            buff.write(_get_struct_I().pack(_x))
            _v89 = _v88.stamp
            _x = _v89
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v88.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v90 = val5.pose
            _v91 = _v90.pose
            _v92 = _v91.position
            _x = _v92
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v93 = _v91.orientation
            _x = _v93
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_v90.covariance.tostring())
          _x = val4.confidence
          buff.write(_get_struct_d().pack(_x))
        _v94 = _v73.shape
        _x = _v94.type
        buff.write(_get_struct_B().pack(_x))
        _v95 = _v94.dimensions
        _x = _v95
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v96 = _v94.footprint
        length = len(_v96.points)
        buff.write(_struct_I.pack(length))
        for val5 in _v96.points:
          _x = val5
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v97 = _v73.path
        length = len(_v97.path)
        buff.write(_struct_I.pack(length))
        for val4 in _v97.path:
          _v98 = val4.header
          _x = _v98.seq
          buff.write(_get_struct_I().pack(_x))
          _v99 = _v98.stamp
          _x = _v99
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v98.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v100 = val4.pose
          _v101 = _v100.pose
          _v102 = _v101.position
          _x = _v102
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v103 = _v101.orientation
          _x = _v103
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_v100.covariance.tostring())
        _x = _v97.confidence
        buff.write(_get_struct_d().pack(_x))
        _v104 = val1.feature
        _v105 = _v104.cluster
        _v106 = _v105.header
        _x = _v106.seq
        buff.write(_get_struct_I().pack(_x))
        _v107 = _v106.stamp
        _x = _v107
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v106.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v105
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v105.fields)
        buff.write(_struct_I.pack(length))
        for val4 in _v105.fields:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v105
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v105.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v105.is_dense
        buff.write(_get_struct_B().pack(_x))
        _v108 = _v104.roi
        _x = _v108
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.feature_objects is None:
        self.feature_objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_objects = []
      for i in range(0, length):
        val1 = object_msgs.msg.DynamicObjectWithFeature()
        _v109 = val1.object
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v109.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v109.id = str[start:end]
        _v110 = _v109.semantic
        _x = _v110
        start = end
        end += 12
        (_x.type, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        _v111 = _v109.state
        _v112 = _v111.pose_covariance
        _v113 = _v112.pose
        _v114 = _v113.position
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v115 = _v113.orientation
        _x = _v115
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v112.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v111.orientation_reliable,) = _get_struct_B().unpack(str[start:end])
        _v111.orientation_reliable = bool(_v111.orientation_reliable)
        _v116 = _v111.twist_covariance
        _v117 = _v116.twist
        _v118 = _v117.linear
        _x = _v118
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v119 = _v117.angular
        _x = _v119
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v116.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v111.twist_reliable,) = _get_struct_B().unpack(str[start:end])
        _v111.twist_reliable = bool(_v111.twist_reliable)
        _v120 = _v111.acceleration_covariance
        _v121 = _v120.accel
        _v122 = _v121.linear
        _x = _v122
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v123 = _v121.angular
        _x = _v123
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v120.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v111.acceleration_reliable,) = _get_struct_B().unpack(str[start:end])
        _v111.acceleration_reliable = bool(_v111.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.predicted_paths = []
        for i in range(0, length):
          val4 = object_msgs.msg.PredictedPath()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.path = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.PoseWithCovarianceStamped()
            _v124 = val5.header
            start = end
            end += 4
            (_v124.seq,) = _get_struct_I().unpack(str[start:end])
            _v125 = _v124.stamp
            _x = _v125
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v124.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v124.frame_id = str[start:end]
            _v126 = val5.pose
            _v127 = _v126.pose
            _v128 = _v127.position
            _x = _v128
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v129 = _v127.orientation
            _x = _v129
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v126.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
            val4.path.append(val5)
          start = end
          end += 8
          (val4.confidence,) = _get_struct_d().unpack(str[start:end])
          _v111.predicted_paths.append(val4)
        _v130 = _v109.shape
        start = end
        end += 1
        (_v130.type,) = _get_struct_B().unpack(str[start:end])
        _v131 = _v130.dimensions
        _x = _v131
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v132 = _v130.footprint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v132.points = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Point32()
          _x = val5
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v132.points.append(val5)
        _v133 = _v109.path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.path = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.PoseWithCovarianceStamped()
          _v134 = val4.header
          start = end
          end += 4
          (_v134.seq,) = _get_struct_I().unpack(str[start:end])
          _v135 = _v134.stamp
          _x = _v135
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v134.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v134.frame_id = str[start:end]
          _v136 = val4.pose
          _v137 = _v136.pose
          _v138 = _v137.position
          _x = _v138
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v139 = _v137.orientation
          _x = _v139
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v136.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v133.path.append(val4)
        start = end
        end += 8
        (_v133.confidence,) = _get_struct_d().unpack(str[start:end])
        _v140 = val1.feature
        _v141 = _v140.cluster
        _v142 = _v141.header
        start = end
        end += 4
        (_v142.seq,) = _get_struct_I().unpack(str[start:end])
        _v143 = _v142.stamp
        _x = _v143
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v142.frame_id = str[start:end]
        _x = _v141
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v141.fields = []
        for i in range(0, length):
          val4 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          _x = val4
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v141.fields.append(val4)
        _x = _v141
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v141.is_bigendian = bool(_v141.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v141.data = str[start:end]
        start = end
        end += 1
        (_v141.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v141.is_dense = bool(_v141.is_dense)
        _v144 = _v140.roi
        _x = _v144
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v144.do_rectify = bool(_v144.do_rectify)
        self.feature_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4IB = None
def _get_struct_4IB():
    global _struct_4IB
    if _struct_4IB is None:
        _struct_4IB = struct.Struct("<4IB")
    return _struct_4IB
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
