# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_msgs/DynamicObjectArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import object_msgs.msg
import std_msgs.msg

class DynamicObjectArray(genpy.Message):
  _md5sum = "a26069a8a718d8b5a3c41201684648cc"
  _type = "object_msgs/DynamicObjectArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
DynamicObject[] objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: object_msgs/DynamicObject
#uuid_msgs/UniqueID id
string id
Semantic semantic
State state
Shape shape
PredictedPath path
================================================================================
MSG: object_msgs/Semantic
uint8 UNKNOWN=0
uint8 CAR=1
uint8 TRUCK=2
uint8 BUS=3
uint8 BICYCLE=4
uint8 MOTORBIKE=5
uint8 PEDESTRIAN=6
uint8 ANIMAL=7
uint32 type
float64 confidence
================================================================================
MSG: object_msgs/State
geometry_msgs/PoseWithCovariance pose_covariance
bool orientation_reliable
geometry_msgs/TwistWithCovariance twist_covariance
bool twist_reliable
geometry_msgs/AccelWithCovariance acceleration_covariance
bool acceleration_reliable
PredictedPath[] predicted_paths

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: object_msgs/PredictedPath
geometry_msgs/PoseWithCovarianceStamped[] path
float64 confidence

================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose

================================================================================
MSG: object_msgs/Shape
uint8 BOUNDING_BOX=0
uint8 CYLINDER=1
uint8 POLYGON=2

uint8 type
geometry_msgs/Vector3 dimensions
geometry_msgs/Polygon footprint 

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','objects']
  _slot_types = ['std_msgs/Header','object_msgs/DynamicObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicObjectArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.semantic
        _x = _v1
        buff.write(_get_struct_Id().pack(_x.type, _x.confidence))
        _v2 = val1.state
        _v3 = _v2.pose_covariance
        _v4 = _v3.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v3.covariance))
        _x = _v2.orientation_reliable
        buff.write(_get_struct_B().pack(_x))
        _v7 = _v2.twist_covariance
        _v8 = _v7.twist
        _v9 = _v8.linear
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.angular
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v7.covariance))
        _x = _v2.twist_reliable
        buff.write(_get_struct_B().pack(_x))
        _v11 = _v2.acceleration_covariance
        _v12 = _v11.accel
        _v13 = _v12.linear
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.angular
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v11.covariance))
        _x = _v2.acceleration_reliable
        buff.write(_get_struct_B().pack(_x))
        length = len(_v2.predicted_paths)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.predicted_paths:
          length = len(val3.path)
          buff.write(_struct_I.pack(length))
          for val4 in val3.path:
            _v15 = val4.header
            _x = _v15.seq
            buff.write(_get_struct_I().pack(_x))
            _v16 = _v15.stamp
            _x = _v16
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v15.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v17 = val4.pose
            _v18 = _v17.pose
            _v19 = _v18.position
            _x = _v19
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v20 = _v18.orientation
            _x = _v20
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_get_struct_36d().pack(*_v17.covariance))
          _x = val3.confidence
          buff.write(_get_struct_d().pack(_x))
        _v21 = val1.shape
        _x = _v21.type
        buff.write(_get_struct_B().pack(_x))
        _v22 = _v21.dimensions
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v23 = _v21.footprint
        length = len(_v23.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v23.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v24 = val1.path
        length = len(_v24.path)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.path:
          _v25 = val3.header
          _x = _v25.seq
          buff.write(_get_struct_I().pack(_x))
          _v26 = _v25.stamp
          _x = _v26
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v25.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v27 = val3.pose
          _v28 = _v27.pose
          _v29 = _v28.position
          _x = _v29
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v30 = _v28.orientation
          _x = _v30
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_36d().pack(*_v27.covariance))
        _x = _v24.confidence
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = object_msgs.msg.DynamicObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v31 = val1.semantic
        _x = _v31
        start = end
        end += 12
        (_x.type, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        _v32 = val1.state
        _v33 = _v32.pose_covariance
        _v34 = _v33.pose
        _v35 = _v34.position
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v34.orientation
        _x = _v36
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v33.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v32.orientation_reliable,) = _get_struct_B().unpack(str[start:end])
        _v32.orientation_reliable = bool(_v32.orientation_reliable)
        _v37 = _v32.twist_covariance
        _v38 = _v37.twist
        _v39 = _v38.linear
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v40 = _v38.angular
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v37.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v32.twist_reliable,) = _get_struct_B().unpack(str[start:end])
        _v32.twist_reliable = bool(_v32.twist_reliable)
        _v41 = _v32.acceleration_covariance
        _v42 = _v41.accel
        _v43 = _v42.linear
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v44 = _v42.angular
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v41.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v32.acceleration_reliable,) = _get_struct_B().unpack(str[start:end])
        _v32.acceleration_reliable = bool(_v32.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v32.predicted_paths = []
        for i in range(0, length):
          val3 = object_msgs.msg.PredictedPath()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.path = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.PoseWithCovarianceStamped()
            _v45 = val4.header
            start = end
            end += 4
            (_v45.seq,) = _get_struct_I().unpack(str[start:end])
            _v46 = _v45.stamp
            _x = _v46
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v45.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v45.frame_id = str[start:end]
            _v47 = val4.pose
            _v48 = _v47.pose
            _v49 = _v48.position
            _x = _v49
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v50 = _v48.orientation
            _x = _v50
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v47.covariance = _get_struct_36d().unpack(str[start:end])
            val3.path.append(val4)
          start = end
          end += 8
          (val3.confidence,) = _get_struct_d().unpack(str[start:end])
          _v32.predicted_paths.append(val3)
        _v51 = val1.shape
        start = end
        end += 1
        (_v51.type,) = _get_struct_B().unpack(str[start:end])
        _v52 = _v51.dimensions
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v53 = _v51.footprint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v53.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v53.points.append(val4)
        _v54 = val1.path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v54.path = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.PoseWithCovarianceStamped()
          _v55 = val3.header
          start = end
          end += 4
          (_v55.seq,) = _get_struct_I().unpack(str[start:end])
          _v56 = _v55.stamp
          _x = _v56
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v55.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v55.frame_id = str[start:end]
          _v57 = val3.pose
          _v58 = _v57.pose
          _v59 = _v58.position
          _x = _v59
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v60 = _v58.orientation
          _x = _v60
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v57.covariance = _get_struct_36d().unpack(str[start:end])
          _v54.path.append(val3)
        start = end
        end += 8
        (_v54.confidence,) = _get_struct_d().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v61 = val1.semantic
        _x = _v61
        buff.write(_get_struct_Id().pack(_x.type, _x.confidence))
        _v62 = val1.state
        _v63 = _v62.pose_covariance
        _v64 = _v63.pose
        _v65 = _v64.position
        _x = _v65
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v66 = _v64.orientation
        _x = _v66
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v63.covariance.tostring())
        _x = _v62.orientation_reliable
        buff.write(_get_struct_B().pack(_x))
        _v67 = _v62.twist_covariance
        _v68 = _v67.twist
        _v69 = _v68.linear
        _x = _v69
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v70 = _v68.angular
        _x = _v70
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v67.covariance.tostring())
        _x = _v62.twist_reliable
        buff.write(_get_struct_B().pack(_x))
        _v71 = _v62.acceleration_covariance
        _v72 = _v71.accel
        _v73 = _v72.linear
        _x = _v73
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v74 = _v72.angular
        _x = _v74
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v71.covariance.tostring())
        _x = _v62.acceleration_reliable
        buff.write(_get_struct_B().pack(_x))
        length = len(_v62.predicted_paths)
        buff.write(_struct_I.pack(length))
        for val3 in _v62.predicted_paths:
          length = len(val3.path)
          buff.write(_struct_I.pack(length))
          for val4 in val3.path:
            _v75 = val4.header
            _x = _v75.seq
            buff.write(_get_struct_I().pack(_x))
            _v76 = _v75.stamp
            _x = _v76
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v75.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v77 = val4.pose
            _v78 = _v77.pose
            _v79 = _v78.position
            _x = _v79
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v80 = _v78.orientation
            _x = _v80
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_v77.covariance.tostring())
          _x = val3.confidence
          buff.write(_get_struct_d().pack(_x))
        _v81 = val1.shape
        _x = _v81.type
        buff.write(_get_struct_B().pack(_x))
        _v82 = _v81.dimensions
        _x = _v82
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v83 = _v81.footprint
        length = len(_v83.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v83.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v84 = val1.path
        length = len(_v84.path)
        buff.write(_struct_I.pack(length))
        for val3 in _v84.path:
          _v85 = val3.header
          _x = _v85.seq
          buff.write(_get_struct_I().pack(_x))
          _v86 = _v85.stamp
          _x = _v86
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v85.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v87 = val3.pose
          _v88 = _v87.pose
          _v89 = _v88.position
          _x = _v89
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v90 = _v88.orientation
          _x = _v90
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_v87.covariance.tostring())
        _x = _v84.confidence
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = object_msgs.msg.DynamicObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v91 = val1.semantic
        _x = _v91
        start = end
        end += 12
        (_x.type, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        _v92 = val1.state
        _v93 = _v92.pose_covariance
        _v94 = _v93.pose
        _v95 = _v94.position
        _x = _v95
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v96 = _v94.orientation
        _x = _v96
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v93.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v92.orientation_reliable,) = _get_struct_B().unpack(str[start:end])
        _v92.orientation_reliable = bool(_v92.orientation_reliable)
        _v97 = _v92.twist_covariance
        _v98 = _v97.twist
        _v99 = _v98.linear
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v100 = _v98.angular
        _x = _v100
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v97.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v92.twist_reliable,) = _get_struct_B().unpack(str[start:end])
        _v92.twist_reliable = bool(_v92.twist_reliable)
        _v101 = _v92.acceleration_covariance
        _v102 = _v101.accel
        _v103 = _v102.linear
        _x = _v103
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v104 = _v102.angular
        _x = _v104
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v101.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v92.acceleration_reliable,) = _get_struct_B().unpack(str[start:end])
        _v92.acceleration_reliable = bool(_v92.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v92.predicted_paths = []
        for i in range(0, length):
          val3 = object_msgs.msg.PredictedPath()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.path = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.PoseWithCovarianceStamped()
            _v105 = val4.header
            start = end
            end += 4
            (_v105.seq,) = _get_struct_I().unpack(str[start:end])
            _v106 = _v105.stamp
            _x = _v106
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v105.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v105.frame_id = str[start:end]
            _v107 = val4.pose
            _v108 = _v107.pose
            _v109 = _v108.position
            _x = _v109
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v110 = _v108.orientation
            _x = _v110
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v107.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
            val3.path.append(val4)
          start = end
          end += 8
          (val3.confidence,) = _get_struct_d().unpack(str[start:end])
          _v92.predicted_paths.append(val3)
        _v111 = val1.shape
        start = end
        end += 1
        (_v111.type,) = _get_struct_B().unpack(str[start:end])
        _v112 = _v111.dimensions
        _x = _v112
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v113 = _v111.footprint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v113.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v113.points.append(val4)
        _v114 = val1.path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v114.path = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.PoseWithCovarianceStamped()
          _v115 = val3.header
          start = end
          end += 4
          (_v115.seq,) = _get_struct_I().unpack(str[start:end])
          _v116 = _v115.stamp
          _x = _v116
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v115.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v115.frame_id = str[start:end]
          _v117 = val3.pose
          _v118 = _v117.pose
          _v119 = _v118.position
          _x = _v119
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v120 = _v118.orientation
          _x = _v120
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v117.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v114.path.append(val3)
        start = end
        end += 8
        (_v114.confidence,) = _get_struct_d().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
